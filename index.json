{
  "API/Solstice.API.Attributes.DeleteAttribute.html": {
    "href": "API/Solstice.API.Attributes.DeleteAttribute.html",
    "title": "Class DeleteAttribute | Solstice",
    "summary": "Class DeleteAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll DeleteAttribute is a class that extends the HttpDeleteAttribute class in the Microsoft.AspNetCore.Mvc package. It allows customization of the DELETE HTTP verb attribute in a Controller action method signature. public class DeleteAttribute : HttpDeleteAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpDeleteAttribute DeleteAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteAttribute() Default constructor that creates a new instance of DeleteAttribute. public DeleteAttribute() DeleteAttribute(string) Constructor that creates a new instance of DeleteAttribute with a route template. public DeleteAttribute(string template) Parameters template string A string that specifies the URI route template for this attribute."
  },
  "API/Solstice.API.Attributes.GetAttribute.html": {
    "href": "API/Solstice.API.Attributes.GetAttribute.html",
    "title": "Class GetAttribute | Solstice",
    "summary": "Class GetAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll GetAttribute class inherits from the HttpGetAttribute class in Microsoft.AspNetCore.Mvc. It works as a HTTP GET method attribute with optional route template. This class has two constructors. The default constructor creates a new GetAttribute with no parameters. The second one accepts a string parameter that represents a route template. public class GetAttribute : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpGetAttribute GetAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This attribute is applied to the actions and is used to influence the action selection process during the Routing in ASP.Net Core. It helps the routing mechanism to select the correct action method to execute when a given request arrives. The route template is an optional parameter which can be used to define the route for this attribute. Constructors GetAttribute() public GetAttribute() GetAttribute(string) public GetAttribute(string template) Parameters template string"
  },
  "API/Solstice.API.Attributes.HeadAttribute.html": {
    "href": "API/Solstice.API.Attributes.HeadAttribute.html",
    "title": "Class HeadAttribute | Solstice",
    "summary": "Class HeadAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll Represents an attribute that specifies that an action supports the HTTP HEAD method. public class HeadAttribute : HttpHeadAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpHeadAttribute HeadAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HeadAttribute() public HeadAttribute() HeadAttribute(string) public HeadAttribute(string template) Parameters template string"
  },
  "API/Solstice.API.Attributes.PatchAttribute.html": {
    "href": "API/Solstice.API.Attributes.PatchAttribute.html",
    "title": "Class PatchAttribute | Solstice",
    "summary": "Class PatchAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll The PatchAttribute class represents a custom attribute to indicate that an action method should handle HTTP PATCH requests. It has been derived from the HttpPatchAttribute class provided by the ASP.NET Core MVC framework. public class PatchAttribute : HttpPatchAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpPatchAttribute PatchAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PatchAttribute() Default constructor for the PatchAttribute class. public PatchAttribute() PatchAttribute(string) Constructor with a parameter for the PatchAttribute class. The template parameter is the route template associated with this attribute. public PatchAttribute(string template) Parameters template string The string that contains the template to associate with this attribute."
  },
  "API/Solstice.API.Attributes.PostAttribute.html": {
    "href": "API/Solstice.API.Attributes.PostAttribute.html",
    "title": "Class PostAttribute | Solstice",
    "summary": "Class PostAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll The 'PostAttribute' class is a decorator extending from the 'HttpPostAttribute' class in the Microsoft ASP.NET Core MVC framework. It is used to specify the HTTP POST request methods for the action methods in the controller class. public class PostAttribute : HttpPostAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpPostAttribute PostAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostAttribute() public PostAttribute() PostAttribute(string) public PostAttribute(string template) Parameters template string"
  },
  "API/Solstice.API.Attributes.PutAttribute.html": {
    "href": "API/Solstice.API.Attributes.PutAttribute.html",
    "title": "Class PutAttribute | Solstice",
    "summary": "Class PutAttribute Namespace Solstice.API.Attributes Assembly Solstice.API.dll The PutAttribute class inherits from the HttpPutAttribute class and represents an attribute that is used to indicate the HTTP PUT method for an action within a controller. public class PutAttribute : HttpPutAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpPutAttribute PutAttribute Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PutAttribute() Default constructor for the PutAttribute class. Initializes a new instance of the class without any parameters. public PutAttribute() PutAttribute(string) Overloaded constructor for the PutAttribute class. Initializes a new instance of the class with string parameter to represent the template for route data. public PutAttribute(string template) Parameters template string The route template. This is a pattern against which the URL path is matched."
  },
  "API/Solstice.API.Attributes.html": {
    "href": "API/Solstice.API.Attributes.html",
    "title": "Namespace Solstice.API.Attributes | Solstice",
    "summary": "Namespace Solstice.API.Attributes Classes DeleteAttribute DeleteAttribute is a class that extends the HttpDeleteAttribute class in the Microsoft.AspNetCore.Mvc package. It allows customization of the DELETE HTTP verb attribute in a Controller action method signature. GetAttribute GetAttribute class inherits from the HttpGetAttribute class in Microsoft.AspNetCore.Mvc. It works as a HTTP GET method attribute with optional route template. This class has two constructors. The default constructor creates a new GetAttribute with no parameters. The second one accepts a string parameter that represents a route template. HeadAttribute Represents an attribute that specifies that an action supports the HTTP HEAD method. PatchAttribute The PatchAttribute class represents a custom attribute to indicate that an action method should handle HTTP PATCH requests. It has been derived from the HttpPatchAttribute class provided by the ASP.NET Core MVC framework. PostAttribute The 'PostAttribute' class is a decorator extending from the 'HttpPostAttribute' class in the Microsoft ASP.NET Core MVC framework. It is used to specify the HTTP POST request methods for the action methods in the controller class. PutAttribute The PutAttribute class inherits from the HttpPutAttribute class and represents an attribute that is used to indicate the HTTP PUT method for an action within a controller."
  },
  "API/Solstice.API.Controllers.CoreController.html": {
    "href": "API/Solstice.API.Controllers.CoreController.html",
    "title": "Class CoreController | Solstice",
    "summary": "Class CoreController Namespace Solstice.API.Controllers Assembly Solstice.API.dll The CoreController is responsible for controlling the behavior of the system when it has to Solstice. This includes authorizing the user who is asking for the system restart, and providing the necessary Solstice API endpoint. [ApiController] [Route(\"api/[controller]\")] public class CoreController : ControllerBase Inheritance object ControllerBase CoreController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ControllerExtensions.OkOrNoContent<T>(ControllerBase, T?) ControllerExtensions.OkOrNotFound<T>(ControllerBase, T?) Methods OkOrNoContent<T>(T) public static ActionResult OkOrNoContent<T>(T result) where T : class Parameters result T Returns ActionResult Type Parameters T OkOrNotFound<T>(T) public static ActionResult OkOrNotFound<T>(T result) where T : class Parameters result T Returns ActionResult Type Parameters T"
  },
  "API/Solstice.API.Controllers.html": {
    "href": "API/Solstice.API.Controllers.html",
    "title": "Namespace Solstice.API.Controllers | Solstice",
    "summary": "Namespace Solstice.API.Controllers Classes CoreController The CoreController is responsible for controlling the behavior of the system when it has to Solstice. This includes authorizing the user who is asking for the system restart, and providing the necessary Solstice API endpoint."
  },
  "API/Solstice.API.Injections.CoreInjections.html": {
    "href": "API/Solstice.API.Injections.CoreInjections.html",
    "title": "Class CoreInjections | Solstice",
    "summary": "Class CoreInjections Namespace Solstice.API.Injections Assembly Solstice.API.dll The CoreInjections class is a static class containing methods related to core service injections in an ASP.NET Core application. public static class CoreInjections Inheritance object CoreInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseLowercaseRoutes(IServiceCollection) This extension method Configures the URL routing system to generate and recognize URLs in lowercase. public static void UseLowercaseRoutes(this IServiceCollection services) Parameters services IServiceCollection The instance of IServiceCollection to add the service to."
  },
  "API/Solstice.API.Injections.html": {
    "href": "API/Solstice.API.Injections.html",
    "title": "Namespace Solstice.API.Injections | Solstice",
    "summary": "Namespace Solstice.API.Injections Classes CoreInjections The CoreInjections class is a static class containing methods related to core service injections in an ASP.NET Core application."
  },
  "API/Solstice.API.Scanning.CoreAssemblyScanning.html": {
    "href": "API/Solstice.API.Scanning.CoreAssemblyScanning.html",
    "title": "Class CoreAssemblyScanning | Solstice",
    "summary": "Class CoreAssemblyScanning Namespace Solstice.API.Scanning Assembly Solstice.API.dll public class CoreAssemblyScanning : AssemblyLoadContext Inheritance object AssemblyLoadContext CoreAssemblyScanning Inherited Members AssemblyLoadContext.EnterContextualReflection() AssemblyLoadContext.EnterContextualReflection(Assembly) AssemblyLoadContext.GetAssemblyName(string) AssemblyLoadContext.GetLoadContext(Assembly) AssemblyLoadContext.LoadFromAssemblyName(AssemblyName) AssemblyLoadContext.LoadFromAssemblyPath(string) AssemblyLoadContext.LoadFromNativeImagePath(string, string) AssemblyLoadContext.LoadFromStream(Stream) AssemblyLoadContext.LoadFromStream(Stream, Stream) AssemblyLoadContext.LoadUnmanagedDll(string) AssemblyLoadContext.LoadUnmanagedDllFromPath(string) AssemblyLoadContext.SetProfileOptimizationRoot(string) AssemblyLoadContext.StartProfileOptimization(string) AssemblyLoadContext.ToString() AssemblyLoadContext.Unload() AssemblyLoadContext.All AssemblyLoadContext.Assemblies AssemblyLoadContext.CurrentContextualReflectionContext AssemblyLoadContext.Default AssemblyLoadContext.IsCollectible AssemblyLoadContext.Name AssemblyLoadContext.Resolving AssemblyLoadContext.ResolvingUnmanagedDll AssemblyLoadContext.Unloading object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CoreAssemblyScanning() public CoreAssemblyScanning() CoreAssemblyScanning(Assembly) public CoreAssemblyScanning(Assembly assembly) Parameters assembly Assembly CoreAssemblyScanning(string) public CoreAssemblyScanning(string directoryPath) Parameters directoryPath string Methods Load(AssemblyName) When overridden in a derived class, allows an assembly to be resolved based on its AssemblyName. protected override Assembly Load(AssemblyName assemblyName) Parameters assemblyName AssemblyName The object that describes the assembly to be resolved. Returns Assembly The resolved assembly, or null. Scan(Assembly) public static void Scan(Assembly assembly) Parameters assembly Assembly ScanAndLoadAssemblies() public void ScanAndLoadAssemblies() ScanByCompanyName(string) public static void ScanByCompanyName(string companyName) Parameters companyName string ScanByMetadata() public static void ScanByMetadata() ScanByPrefix(string) public static void ScanByPrefix(string assemblyPrefix) Parameters assemblyPrefix string"
  },
  "API/Solstice.API.Scanning.CoreAssemblyScanningExtensions.html": {
    "href": "API/Solstice.API.Scanning.CoreAssemblyScanningExtensions.html",
    "title": "Class CoreAssemblyScanningExtensions | Solstice",
    "summary": "Class CoreAssemblyScanningExtensions Namespace Solstice.API.Scanning Assembly Solstice.API.dll public static class CoreAssemblyScanningExtensions Inheritance object CoreAssemblyScanningExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ScanAndLoadAssemblies(WebApplicationBuilder, Assembly) public static void ScanAndLoadAssemblies(this WebApplicationBuilder builder, Assembly assembly) Parameters builder WebApplicationBuilder assembly Assembly ScanAndLoadAssembliesByCompanyName(WebApplicationBuilder, string) Scan and load assemblies by company name. public static void ScanAndLoadAssembliesByCompanyName(this WebApplicationBuilder builder, string companyName) Parameters builder WebApplicationBuilder Your web api builder companyName string Your company name set in assemblies settings ScanAndLoadAssembliesByMetadata(WebApplicationBuilder) Scan and load assemblies by metadata. Add the metadata attribute \"IsSolutionAssembly\" to true, surrounded by PropertyGroup. public static void ScanAndLoadAssembliesByMetadata(this WebApplicationBuilder builder) Parameters builder WebApplicationBuilder Your web api builder Remarks <PropertyGroup><IsSolutionAssembly>true</IsSolutionAssembly></PropertyGroup> ScanAndLoadAssembliesByPrefix(WebApplicationBuilder, string) Scan and load assemblies by prefix. public static void ScanAndLoadAssembliesByPrefix(this WebApplicationBuilder builder, string assemblyPrefix) Parameters builder WebApplicationBuilder Your web api builder assemblyPrefix string The assembly prefix of your projects"
  },
  "API/Solstice.API.Scanning.html": {
    "href": "API/Solstice.API.Scanning.html",
    "title": "Namespace Solstice.API.Scanning | Solstice",
    "summary": "Namespace Solstice.API.Scanning Classes CoreAssemblyScanning CoreAssemblyScanningExtensions"
  },
  "API/Solstice.API.Utils.ControllerExtensions.html": {
    "href": "API/Solstice.API.Utils.ControllerExtensions.html",
    "title": "Class ControllerExtensions | Solstice",
    "summary": "Class ControllerExtensions Namespace Solstice.API.Utils Assembly Solstice.API.dll public static class ControllerExtensions Inheritance object ControllerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OkOrNoContent<T>(ControllerBase, T?) public static ActionResult OkOrNoContent<T>(this ControllerBase _, T? result) where T : class Parameters _ ControllerBase result T Returns ActionResult Type Parameters T OkOrNotFound<T>(ControllerBase, T?) public static ActionResult OkOrNotFound<T>(this ControllerBase _, T? result) where T : class Parameters _ ControllerBase result T Returns ActionResult Type Parameters T"
  },
  "API/Solstice.API.Utils.html": {
    "href": "API/Solstice.API.Utils.html",
    "title": "Namespace Solstice.API.Utils | Solstice",
    "summary": "Namespace Solstice.API.Utils Classes ControllerExtensions"
  },
  "Database/Solstice.Database.Conventions.Helpers.ICaseHelper.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.ICaseHelper.html",
    "title": "Interface ICaseHelper | Solstice",
    "summary": "Interface ICaseHelper Namespace Solstice.Database.Conventions.Helpers Assembly Solstice.Database.Conventions.dll public interface ICaseHelper Methods Convert(string) public static abstract string Convert(string input) Parameters input string Returns string"
  },
  "Database/Solstice.Database.Conventions.Helpers.LowerCaseHelper.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.LowerCaseHelper.html",
    "title": "Class LowerCaseHelper | Solstice",
    "summary": "Class LowerCaseHelper Namespace Solstice.Database.Conventions.Helpers Assembly Solstice.Database.Conventions.dll public class LowerCaseHelper : ICaseHelper Inheritance object LowerCaseHelper Implements ICaseHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(string) public static string Convert(string input) Parameters input string Returns string"
  },
  "Database/Solstice.Database.Conventions.Helpers.SnakeCaseHelper.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.SnakeCaseHelper.html",
    "title": "Class SnakeCaseHelper | Solstice",
    "summary": "Class SnakeCaseHelper Namespace Solstice.Database.Conventions.Helpers Assembly Solstice.Database.Conventions.dll public class SnakeCaseHelper : ICaseHelper Inheritance object SnakeCaseHelper Implements ICaseHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(string) public static string Convert(string input) Parameters input string Returns string"
  },
  "Database/Solstice.Database.Conventions.Helpers.UpperCaseHelper.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.UpperCaseHelper.html",
    "title": "Class UpperCaseHelper | Solstice",
    "summary": "Class UpperCaseHelper Namespace Solstice.Database.Conventions.Helpers Assembly Solstice.Database.Conventions.dll public class UpperCaseHelper : ICaseHelper Inheritance object UpperCaseHelper Implements ICaseHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(string) public static string Convert(string input) Parameters input string Returns string"
  },
  "Database/Solstice.Database.Conventions.Helpers.UpperSnakeCaseHelper.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.UpperSnakeCaseHelper.html",
    "title": "Class UpperSnakeCaseHelper | Solstice",
    "summary": "Class UpperSnakeCaseHelper Namespace Solstice.Database.Conventions.Helpers Assembly Solstice.Database.Conventions.dll public class UpperSnakeCaseHelper : ICaseHelper Inheritance object UpperSnakeCaseHelper Implements ICaseHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(string) public static string Convert(string input) Parameters input string Returns string"
  },
  "Database/Solstice.Database.Conventions.Helpers.html": {
    "href": "Database/Solstice.Database.Conventions.Helpers.html",
    "title": "Namespace Solstice.Database.Conventions.Helpers | Solstice",
    "summary": "Namespace Solstice.Database.Conventions.Helpers Classes LowerCaseHelper SnakeCaseHelper UpperCaseHelper UpperSnakeCaseHelper Interfaces ICaseHelper"
  },
  "Database/Solstice.Database.Conventions.Injections.ConventionsInjections.html": {
    "href": "Database/Solstice.Database.Conventions.Injections.ConventionsInjections.html",
    "title": "Class ConventionsInjections | Solstice",
    "summary": "Class ConventionsInjections Namespace Solstice.Database.Conventions.Injections Assembly Solstice.Database.Conventions.dll public static class ConventionsInjections Inheritance object ConventionsInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToLowerCase(ModelConfigurationBuilder) public static void ToLowerCase(this ModelConfigurationBuilder configurationBuilder) Parameters configurationBuilder ModelConfigurationBuilder ToSnakeCase(ModelConfigurationBuilder) public static void ToSnakeCase(this ModelConfigurationBuilder configurationBuilder) Parameters configurationBuilder ModelConfigurationBuilder ToUpperCase(ModelConfigurationBuilder) public static void ToUpperCase(this ModelConfigurationBuilder configurationBuilder) Parameters configurationBuilder ModelConfigurationBuilder ToUpperSnakeCase(ModelConfigurationBuilder) public static void ToUpperSnakeCase(this ModelConfigurationBuilder configurationBuilder) Parameters configurationBuilder ModelConfigurationBuilder"
  },
  "Database/Solstice.Database.Conventions.Injections.html": {
    "href": "Database/Solstice.Database.Conventions.Injections.html",
    "title": "Namespace Solstice.Database.Conventions.Injections | Solstice",
    "summary": "Namespace Solstice.Database.Conventions.Injections Classes ConventionsInjections"
  },
  "Database/Solstice.Database.Conventions.NamingConventions.LowerCaseNamingConvention.html": {
    "href": "Database/Solstice.Database.Conventions.NamingConventions.LowerCaseNamingConvention.html",
    "title": "Class LowerCaseNamingConvention | Solstice",
    "summary": "Class LowerCaseNamingConvention Namespace Solstice.Database.Conventions.NamingConventions Assembly Solstice.Database.Conventions.dll public class LowerCaseNamingConvention : IModelFinalizingConvention, IConvention Inheritance object LowerCaseNamingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters modelBuilder IConventionModelBuilder The builder for the model. context IConventionContext<IConventionModelBuilder> Additional information associated with convention execution."
  },
  "Database/Solstice.Database.Conventions.NamingConventions.SnakeCaseNamingConvention.html": {
    "href": "Database/Solstice.Database.Conventions.NamingConventions.SnakeCaseNamingConvention.html",
    "title": "Class SnakeCaseNamingConvention | Solstice",
    "summary": "Class SnakeCaseNamingConvention Namespace Solstice.Database.Conventions.NamingConventions Assembly Solstice.Database.Conventions.dll public class SnakeCaseNamingConvention : IModelFinalizingConvention, IConvention Inheritance object SnakeCaseNamingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters modelBuilder IConventionModelBuilder The builder for the model. context IConventionContext<IConventionModelBuilder> Additional information associated with convention execution."
  },
  "Database/Solstice.Database.Conventions.NamingConventions.UpperCaseNamingConvention.html": {
    "href": "Database/Solstice.Database.Conventions.NamingConventions.UpperCaseNamingConvention.html",
    "title": "Class UpperCaseNamingConvention | Solstice",
    "summary": "Class UpperCaseNamingConvention Namespace Solstice.Database.Conventions.NamingConventions Assembly Solstice.Database.Conventions.dll public class UpperCaseNamingConvention : IModelFinalizingConvention, IConvention Inheritance object UpperCaseNamingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters modelBuilder IConventionModelBuilder The builder for the model. context IConventionContext<IConventionModelBuilder> Additional information associated with convention execution."
  },
  "Database/Solstice.Database.Conventions.NamingConventions.UpperSnakeCaseNamingConvention.html": {
    "href": "Database/Solstice.Database.Conventions.NamingConventions.UpperSnakeCaseNamingConvention.html",
    "title": "Class UpperSnakeCaseNamingConvention | Solstice",
    "summary": "Class UpperSnakeCaseNamingConvention Namespace Solstice.Database.Conventions.NamingConventions Assembly Solstice.Database.Conventions.dll public class UpperSnakeCaseNamingConvention : IModelFinalizingConvention, IConvention Inheritance object UpperSnakeCaseNamingConvention Implements IModelFinalizingConvention IConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessModelFinalizing(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called when a model is being finalized. public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters modelBuilder IConventionModelBuilder The builder for the model. context IConventionContext<IConventionModelBuilder> Additional information associated with convention execution."
  },
  "Database/Solstice.Database.Conventions.NamingConventions.html": {
    "href": "Database/Solstice.Database.Conventions.NamingConventions.html",
    "title": "Namespace Solstice.Database.Conventions.NamingConventions | Solstice",
    "summary": "Namespace Solstice.Database.Conventions.NamingConventions Classes LowerCaseNamingConvention SnakeCaseNamingConvention UpperCaseNamingConvention UpperSnakeCaseNamingConvention"
  },
  "Database/Solstice.Database.MySql.Injections.MySqlInjections.html": {
    "href": "Database/Solstice.Database.MySql.Injections.MySqlInjections.html",
    "title": "Class MySqlInjections | Solstice",
    "summary": "Class MySqlInjections Namespace Solstice.Database.MySql.Injections Assembly Solstice.Database.MySql.dll public static class MySqlInjections Inheritance object MySqlInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDatabaseContext<TDbContext>(IServiceCollection, string, ILoggerFactory?, bool) public static void AddDatabaseContext<TDbContext>(this IServiceCollection services, string config, ILoggerFactory? loggerFactory, bool migrate = false) where TDbContext : DbContext Parameters services IServiceCollection config string loggerFactory ILoggerFactory migrate bool Type Parameters TDbContext AddDatabaseContext<TDbContext>(IServiceCollection, string, bool) public static void AddDatabaseContext<TDbContext>(this IServiceCollection services, string config, bool migrate = false) where TDbContext : DbContext Parameters services IServiceCollection config string migrate bool Type Parameters TDbContext"
  },
  "Database/Solstice.Database.MySql.Injections.html": {
    "href": "Database/Solstice.Database.MySql.Injections.html",
    "title": "Namespace Solstice.Database.MySql.Injections | Solstice",
    "summary": "Namespace Solstice.Database.MySql.Injections Classes MySqlInjections"
  },
  "Database/Solstice.Database.PostgreSQL.Injections.PostgreSqlInjections.html": {
    "href": "Database/Solstice.Database.PostgreSQL.Injections.PostgreSqlInjections.html",
    "title": "Class PostgreSqlInjections | Solstice",
    "summary": "Class PostgreSqlInjections Namespace Solstice.Database.PostgreSQL.Injections Assembly Solstice.Database.PostgreSQL.dll public static class PostgreSqlInjections Inheritance object PostgreSqlInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDatabaseContext<TDbContext>(IServiceCollection, string, ILoggerFactory?, bool) public static void AddDatabaseContext<TDbContext>(this IServiceCollection services, string config, ILoggerFactory? loggerFactory, bool migrate = false) where TDbContext : DbContext Parameters services IServiceCollection config string loggerFactory ILoggerFactory migrate bool Type Parameters TDbContext AddDatabaseContext<TDbContext>(IServiceCollection, string, bool) public static void AddDatabaseContext<TDbContext>(this IServiceCollection services, string config, bool migrate = false) where TDbContext : DbContext Parameters services IServiceCollection config string migrate bool Type Parameters TDbContext"
  },
  "Database/Solstice.Database.PostgreSQL.Injections.html": {
    "href": "Database/Solstice.Database.PostgreSQL.Injections.html",
    "title": "Namespace Solstice.Database.PostgreSQL.Injections | Solstice",
    "summary": "Namespace Solstice.Database.PostgreSQL.Injections Classes PostgreSqlInjections"
  },
  "Domain/Solstice.Domain.Exceptions.CoreException.html": {
    "href": "Domain/Solstice.Domain.Exceptions.CoreException.html",
    "title": "Class CoreException | Solstice",
    "summary": "Class CoreException Namespace Solstice.Domain.Exceptions Assembly Solstice.Domain.dll Represents an exception that is thrown when there is an error. public class CoreException : Exception, ISerializable Inheritance object Exception CoreException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) Constructors CoreException(int, string) public CoreException(int statusCode, string message) Parameters statusCode int message string CoreException(int, string, Exception) public CoreException(int statusCode, string message, Exception innerException) Parameters statusCode int message string innerException Exception CoreException(string) public CoreException(string message) Parameters message string CoreException(string, Exception) public CoreException(string message, Exception innerException) Parameters message string innerException Exception Properties StatusCode public int StatusCode { get; } Property Value int Methods Error400(params object[]) Generate a 400 error with or without a message. public static CoreException Error400(params object[] values) Parameters values object[] Returns CoreException Error401(params object[]) Generate a 401 error with or without a message. public static CoreException Error401(params object[] values) Parameters values object[] Returns CoreException Error403(params object[]) Generate a 403 error with or without a message. public static CoreException Error403(params object[] values) Parameters values object[] Returns CoreException Error404(params object[]) Generate a 404 error with or without a message. public static CoreException Error404(params object[] values) Parameters values object[] Returns CoreException Error500(params object[]) Generate a 500 error with or without a message. public static CoreException Error500(params object[] values) Parameters values object[] Returns CoreException Format(CoreExceptionEnum) Used to generate exception message based on the provided CoreExceptionEnum. public static CoreException Format(CoreExceptionEnum coreExceptionEnum) Parameters coreExceptionEnum CoreExceptionEnum Returns CoreException Format(CoreExceptionEnum, params object[]) public static CoreException Format(CoreExceptionEnum coreExceptionEnum, params object[] values) Parameters coreExceptionEnum CoreExceptionEnum values object[] Returns CoreException Format(Exception, CoreExceptionEnum, params object[]) public static CoreException Format(Exception ex, CoreExceptionEnum coreExceptionEnum, params object[] values) Parameters ex Exception coreExceptionEnum CoreExceptionEnum values object[] Returns CoreException Format(Exception, int, CoreExceptionEnum, params object[]) public static CoreException Format(Exception ex, int statusCode, CoreExceptionEnum coreExceptionEnum, params object[] values) Parameters ex Exception statusCode int coreExceptionEnum CoreExceptionEnum values object[] Returns CoreException Format(int, CoreExceptionEnum, params object[]) public static CoreException Format(int statusCode, CoreExceptionEnum coreExceptionEnum, params object[] values) Parameters statusCode int coreExceptionEnum CoreExceptionEnum values object[] Returns CoreException"
  },
  "Domain/Solstice.Domain.Exceptions.CoreExceptionEnum.html": {
    "href": "Domain/Solstice.Domain.Exceptions.CoreExceptionEnum.html",
    "title": "Enum CoreExceptionEnum | Solstice",
    "summary": "Enum CoreExceptionEnum Namespace Solstice.Domain.Exceptions Assembly Solstice.Domain.dll Represents the possible exceptions that can be thrown by the Solstice.Domain classes. public enum CoreExceptionEnum Extension Methods CoreExceptionEnumExtension.Get(CoreExceptionEnum) Fields HTTP_400 = 3 HTTP_400_WITH_MESSAGE = 4 HTTP_401 = 5 HTTP_401_WITH_MESSAGE = 6 HTTP_403 = 7 HTTP_403_WITH_MESSAGE = 8 HTTP_404 = 9 HTTP_404_WITH_MESSAGE = 10 HTTP_500 = 11 HTTP_500_WITH_MESSAGE = 12 NO_QUERY_DTO = 2 NO_REPOSITORY = 0 NO_SERVICE = 1"
  },
  "Domain/Solstice.Domain.Exceptions.CoreExceptionEnumExtension.html": {
    "href": "Domain/Solstice.Domain.Exceptions.CoreExceptionEnumExtension.html",
    "title": "Class CoreExceptionEnumExtension | Solstice",
    "summary": "Class CoreExceptionEnumExtension Namespace Solstice.Domain.Exceptions Assembly Solstice.Domain.dll Provides extension methods for the CoreExceptionEnum enumeration. public static class CoreExceptionEnumExtension Inheritance object CoreExceptionEnumExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(CoreExceptionEnum) Gets the error message associated with the specified CoreExceptionEnum value. public static string Get(this CoreExceptionEnum coreExceptionEnum) Parameters coreExceptionEnum CoreExceptionEnum The CoreExceptionEnum value. Returns string The error message associated with the specified CoreExceptionEnum value."
  },
  "Domain/Solstice.Domain.Exceptions.html": {
    "href": "Domain/Solstice.Domain.Exceptions.html",
    "title": "Namespace Solstice.Domain.Exceptions | Solstice",
    "summary": "Namespace Solstice.Domain.Exceptions Classes CoreException Represents an exception that is thrown when there is an error. CoreExceptionEnumExtension Provides extension methods for the CoreExceptionEnum enumeration. Enums CoreExceptionEnum Represents the possible exceptions that can be thrown by the Solstice.Domain classes."
  },
  "Domain/Solstice.Domain.Extensions.EnumerableExtensions.html": {
    "href": "Domain/Solstice.Domain.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Solstice",
    "summary": "Class EnumerableExtensions Namespace Solstice.Domain.Extensions Assembly Solstice.Domain.dll public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNotNullOrEmpty<T>(IEnumerable<T>) public static bool IsNotNullOrEmpty<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns bool Type Parameters T IsNullOrEmpty<T>(IEnumerable<T>) public static bool IsNullOrEmpty<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns bool Type Parameters T"
  },
  "Domain/Solstice.Domain.Extensions.IEnumerableExtensions.html": {
    "href": "Domain/Solstice.Domain.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Solstice",
    "summary": "Class IEnumerableExtensions Namespace Solstice.Domain.Extensions Assembly Solstice.Domain.dll public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNotNullOrEmpty<T>(IEnumerable<T>) public static bool IsNotNullOrEmpty<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns bool Type Parameters T IsNullOrEmpty<T>(IEnumerable<T>) public static bool IsNullOrEmpty<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns bool Type Parameters T"
  },
  "Domain/Solstice.Domain.Extensions.IQueryableExtensions.html": {
    "href": "Domain/Solstice.Domain.Extensions.IQueryableExtensions.html",
    "title": "Class IQueryableExtensions | Solstice",
    "summary": "Class IQueryableExtensions Namespace Solstice.Domain.Extensions Assembly Solstice.Domain.dll public static class IQueryableExtensions Inheritance object IQueryableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNotNullOrEmpty<T>(IQueryable<T>) public static bool IsNotNullOrEmpty<T>(this IQueryable<T> list) Parameters list IQueryable<T> Returns bool Type Parameters T IsNullOrEmpty<T>(IQueryable<T>) public static bool IsNullOrEmpty<T>(this IQueryable<T> list) Parameters list IQueryable<T> Returns bool Type Parameters T"
  },
  "Domain/Solstice.Domain.Extensions.QueryableExtensions.html": {
    "href": "Domain/Solstice.Domain.Extensions.QueryableExtensions.html",
    "title": "Class QueryableExtensions | Solstice",
    "summary": "Class QueryableExtensions Namespace Solstice.Domain.Extensions Assembly Solstice.Domain.dll public static class QueryableExtensions Inheritance object QueryableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNotNullOrEmpty<T>(IQueryable<T>) public static bool IsNotNullOrEmpty<T>(this IQueryable<T> list) Parameters list IQueryable<T> Returns bool Type Parameters T IsNullOrEmpty<T>(IQueryable<T>) public static bool IsNullOrEmpty<T>(this IQueryable<T> list) Parameters list IQueryable<T> Returns bool Type Parameters T"
  },
  "Domain/Solstice.Domain.Extensions.html": {
    "href": "Domain/Solstice.Domain.Extensions.html",
    "title": "Namespace Solstice.Domain.Extensions | Solstice",
    "summary": "Namespace Solstice.Domain.Extensions Classes EnumerableExtensions QueryableExtensions"
  },
  "Domain/Solstice.Domain.Models.CoreModel.html": {
    "href": "Domain/Solstice.Domain.Models.CoreModel.html",
    "title": "Class CoreModel | Solstice",
    "summary": "Class CoreModel Namespace Solstice.Domain.Models Assembly Solstice.Domain.dll CoreModel class provides a structure to encapsulate information related to Solstice functionality in the application. The information mainly includes id associated to each Solstice transaction or operation. public class CoreModel Inheritance object CoreModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) Properties Id Gets or sets the unique identifier for the Solstice operation. public int Id { get; set; } Property Value int"
  },
  "Domain/Solstice.Domain.Models.Page.html": {
    "href": "Domain/Solstice.Domain.Models.Page.html",
    "title": "Class Page | Solstice",
    "summary": "Class Page Namespace Solstice.Domain.Models Assembly Solstice.Domain.dll Represents a page in a Solstice context with a specific page number and size. public record Page : IEquatable<Page> Inheritance object Page Implements IEquatable<Page> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PageExtension.LineToSkip(Page) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) Constructors Page(int, int) Represents a page in a Solstice context with a specific page number and size. public Page(int PageNumber = 1, int PageSize = 10) Parameters PageNumber int The number of the page, default is 1. PageSize int The size of the page, default is 10. Properties PageNumber The number of the page, default is 1. public int PageNumber { get; init; } Property Value int PageSize The size of the page, default is 10. public int PageSize { get; init; } Property Value int"
  },
  "Domain/Solstice.Domain.Models.PageExtension.html": {
    "href": "Domain/Solstice.Domain.Models.PageExtension.html",
    "title": "Class PageExtension | Solstice",
    "summary": "Class PageExtension Namespace Solstice.Domain.Models Assembly Solstice.Domain.dll Provides extension methods on a Page instance. public static class PageExtension Inheritance object PageExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LineToSkip(Page) Calculates how many entries need to be skipped for pagination. public static int LineToSkip(this Page page) Parameters page Page A Page instance. Returns int Returns the number of entries that needs to be skipped to get the correct page context."
  },
  "Domain/Solstice.Domain.Models.Paged-1.html": {
    "href": "Domain/Solstice.Domain.Models.Paged-1.html",
    "title": "Class Paged<T> | Solstice",
    "summary": "Class Paged<T> Namespace Solstice.Domain.Models Assembly Solstice.Domain.dll The 'Paged' class provides a simple way to encapsulate a collection of items with a certain count. It's generic, able to support any type of object (indicated by 'T') for pagination purposes. public class Paged<T> Type Parameters T The type of items held within the 'Paged' object. Inheritance object Paged<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) Remarks Properties include: 'Items': A collection of items of type 'T'. Nullable. 'Count': The total count of items present in the 'Items' collection. Properties Count public int Count { get; set; } Property Value int Items public ICollection<T>? Items { get; set; } Property Value ICollection<T>"
  },
  "Domain/Solstice.Domain.Models.html": {
    "href": "Domain/Solstice.Domain.Models.html",
    "title": "Namespace Solstice.Domain.Models | Solstice",
    "summary": "Namespace Solstice.Domain.Models Classes CoreModel CoreModel class provides a structure to encapsulate information related to Solstice functionality in the application. The information mainly includes id associated to each Solstice transaction or operation. Page Represents a page in a Solstice context with a specific page number and size. PageExtension Provides extension methods on a Page instance. Paged<T> The 'Paged' class provides a simple way to encapsulate a collection of items with a certain count. It's generic, able to support any type of object (indicated by 'T') for pagination purposes."
  },
  "Domain/Solstice.Domain.Utils.Error.html": {
    "href": "Domain/Solstice.Domain.Utils.Error.html",
    "title": "Class Error | Solstice",
    "summary": "Class Error Namespace Solstice.Domain.Utils Assembly Solstice.Domain.dll public record Error : IEquatable<Error> Inheritance object Error Implements IEquatable<Error> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) Constructors Error(string, string) public Error(string Code, string Message) Parameters Code string Message string Fields None public static Error None Field Value Error NullValue public static Error NullValue Field Value Error Properties AlreadyExistsEmail public static Error AlreadyExistsEmail { get; } Property Value Error AlreadyExistsUsername public static Error AlreadyExistsUsername { get; } Property Value Error Code public string Code { get; init; } Property Value string InvalidCredentials public static Error InvalidCredentials { get; } Property Value Error InvalidUser public static Error InvalidUser { get; } Property Value Error Message public string Message { get; init; } Property Value string"
  },
  "Domain/Solstice.Domain.Utils.MatchExtensions.html": {
    "href": "Domain/Solstice.Domain.Utils.MatchExtensions.html",
    "title": "Class MatchExtensions | Solstice",
    "summary": "Class MatchExtensions Namespace Solstice.Domain.Utils Assembly Solstice.Domain.dll public static class MatchExtensions Inheritance object MatchExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, Task<TResult>> onSome, Func<Task<TResult>> onNone) where T : struct Parameters value T? onSome Func<T, Task<TResult>> onNone Func<Task<TResult>> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, Task<TResult>> onSome, Func<TResult> onNone) where T : struct Parameters value T? onSome Func<T, Task<TResult>> onNone Func<TResult> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, TResult> onSome, Func<Task<TResult>> onNone) where T : struct Parameters value T? onSome Func<T, TResult> onNone Func<Task<TResult>> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) public static TResult Some<T, TResult>(this T? value, Func<T, TResult> onSome, Func<TResult> onNone) where T : struct Parameters value T? onSome Func<T, TResult> onNone Func<TResult> Returns TResult Type Parameters T TResult Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, Task<TResult>> onSome, Func<Task<TResult>> onNone) where T : class Parameters value T onSome Func<T, Task<TResult>> onNone Func<Task<TResult>> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, Task<TResult>> onSome, Func<TResult> onNone) where T : class Parameters value T onSome Func<T, Task<TResult>> onNone Func<TResult> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) public static Task<TResult> Some<T, TResult>(this T? value, Func<T, TResult> onSome, Func<Task<TResult>> onNone) where T : class Parameters value T onSome Func<T, TResult> onNone Func<Task<TResult>> Returns Task<TResult> Type Parameters T TResult Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) public static TResult Some<T, TResult>(this T? value, Func<T, TResult> onSome, Func<TResult> onNone) where T : class Parameters value T onSome Func<T, TResult> onNone Func<TResult> Returns TResult Type Parameters T TResult"
  },
  "Domain/Solstice.Domain.Utils.Result-2.html": {
    "href": "Domain/Solstice.Domain.Utils.Result-2.html",
    "title": "Class Result<TSuccess, TError> | Solstice",
    "summary": "Class Result<TSuccess, TError> Namespace Solstice.Domain.Utils Assembly Solstice.Domain.dll public class Result<TSuccess, TError> Type Parameters TSuccess TError Inheritance object Result<TSuccess, TError> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, Task<TResult>>, Func<TResult>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<Task<TResult>>) MatchExtensions.Some<T, TResult>(T?, Func<T, TResult>, Func<TResult>) ResultExtensions.Match<TSuccess, TError, TResult>(Result<TSuccess, TError>, Func<TSuccess, TResult>, Func<TError, TResult>) Constructors Result(TSuccess, TError, bool) protected Result(TSuccess success, TError error, bool isSuccess) Parameters success TSuccess error TError isSuccess bool Properties Error public TError Error { get; } Property Value TError IsSuccess public bool IsSuccess { get; } Property Value bool Success public TSuccess Success { get; } Property Value TSuccess Methods Err(TError) public static Result<TSuccess, TError> Err(TError error) Parameters error TError Returns Result<TSuccess, TError> Ok(TSuccess) public static Result<TSuccess, TError> Ok(TSuccess success) Parameters success TSuccess Returns Result<TSuccess, TError>"
  },
  "Domain/Solstice.Domain.Utils.ResultExtensions.html": {
    "href": "Domain/Solstice.Domain.Utils.ResultExtensions.html",
    "title": "Class ResultExtensions | Solstice",
    "summary": "Class ResultExtensions Namespace Solstice.Domain.Utils Assembly Solstice.Domain.dll public static class ResultExtensions Inheritance object ResultExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Match<TSuccess, TError, TResult>(Result<TSuccess, TError>, Func<TSuccess, TResult>, Func<TError, TResult>) public static TResult Match<TSuccess, TError, TResult>(this Result<TSuccess, TError> result, Func<TSuccess, TResult> onSuccess, Func<TError, TResult> onError) Parameters result Result<TSuccess, TError> onSuccess Func<TSuccess, TResult> onError Func<TError, TResult> Returns TResult Type Parameters TSuccess TError TResult"
  },
  "Domain/Solstice.Domain.Utils.html": {
    "href": "Domain/Solstice.Domain.Utils.html",
    "title": "Namespace Solstice.Domain.Utils | Solstice",
    "summary": "Namespace Solstice.Domain.Utils Classes Error MatchExtensions ResultExtensions Result<TSuccess, TError>"
  },
  "Repository/Solstice.Infrastructure.Attributes.QueryAttribute.html": {
    "href": "Repository/Solstice.Infrastructure.Attributes.QueryAttribute.html",
    "title": "Class QueryAttribute | Solstice",
    "summary": "Class QueryAttribute Namespace Solstice.Infrastructure.Attributes Assembly Solstice.Infrastructure.dll Represents a custom attribute. This attribute is used to indicate which classes are to be used for database queries. It is a sealed class derived from the Attribute class, hence no other class can inherit from it. [AttributeUsage(AttributeTargets.Class)] public sealed class QueryAttribute : Attribute Inheritance object Attribute QueryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Repository/Solstice.Infrastructure.Attributes.RepositoryAttribute.html": {
    "href": "Repository/Solstice.Infrastructure.Attributes.RepositoryAttribute.html",
    "title": "Class RepositoryAttribute | Solstice",
    "summary": "Class RepositoryAttribute Namespace Solstice.Infrastructure.Attributes Assembly Solstice.Infrastructure.dll The 'RepositoryAttribute' class, derived from 'Attribute', is a custom attribute class. It may be used to annotate repository classes. This class is 'sealed' which prevents further derivation. [AttributeUsage(AttributeTargets.Class)] public sealed class RepositoryAttribute : Attribute Inheritance object Attribute RepositoryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Repository/Solstice.Infrastructure.Attributes.html": {
    "href": "Repository/Solstice.Infrastructure.Attributes.html",
    "title": "Namespace Solstice.Infrastructure.Attributes | Solstice",
    "summary": "Namespace Solstice.Infrastructure.Attributes Classes QueryAttribute Represents a custom attribute. This attribute is used to indicate which classes are to be used for database queries. It is a sealed class derived from the Attribute class, hence no other class can inherit from it. RepositoryAttribute The 'RepositoryAttribute' class, derived from 'Attribute', is a custom attribute class. It may be used to annotate repository classes. This class is 'sealed' which prevents further derivation."
  },
  "Repository/Solstice.Infrastructure.Core.CoreRepository-2.html": {
    "href": "Repository/Solstice.Infrastructure.Core.CoreRepository-2.html",
    "title": "Class CoreRepository<T, TContext> | Solstice",
    "summary": "Class CoreRepository<T, TContext> Namespace Solstice.Infrastructure.Core Assembly Solstice.Infrastructure.dll An abstract class for the CoreRepository. Constructs a repository with a given context and Http context. public class CoreRepository<T, TContext> : ICoreRepository<T> where T : class where TContext : DbContext Type Parameters T A entity type TContext The DbContext type Inheritance object CoreRepository<T, TContext> Implements ICoreRepository<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreRepository(TContext, IHttpContextAccessor) Constructs a new instance of CoreRepository with the given context and Http context. protected CoreRepository(TContext dbContext, IHttpContextAccessor httpContext) Parameters dbContext TContext The DbContext to use. httpContext IHttpContextAccessor The HttpContext to use for cancellations. Methods AddAndSaveAsync(T) public Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) public Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Adds the given entity to the database and saves the changes. public Task AddAsync(T entity) Parameters entity T The entity to add. Returns Task AddAsync<TEntity>(TEntity) public Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) public Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Adds a range of entities to the database and saves the changes. public Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities to add. Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsync(Expression<Func<T, bool>>) Checks if any entities in the database match the given expression. public Task<bool> AnyAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating whether any entities match the expression. AnyAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<bool> AnyAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsync<TEntity>(IQueryable<TEntity>) public Task<bool> AnyAsync<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction in the database. public Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result contains the IDbContextTransaction that encapsulates all changes made to the DbContext within the transaction. ChangeTracker() public ChangeTracker ChangeTracker() Returns ChangeTracker CountAsync() Counts all entities in the database. public Task<decimal> CountAsync() Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of all entities. CountAsync(Expression<Func<T, bool>>?) Counts all entities in the database that satisfy the given expression. public Task<decimal> CountAsync(Expression<Func<T, bool>>? where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of entities that satisfy the expression. CountAsync<TEntity>() Counts all entities in the database. public Task<decimal> CountAsync<TEntity>() where TEntity : class Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of all entities. Type Parameters TEntity CountAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<decimal> CountAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity ExecuteQuery(string, ICollection<DbParameter>?) public Task ExecuteQuery(string query, ICollection<DbParameter>? dbParameters) Parameters query string dbParameters ICollection<DbParameter> Returns Task FindAsync(int) public Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) public Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync() Gets all entities from the database. public Task<ICollection<T>> GetAllAsync() Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of all entities. GetAllAsync(ICoreSpecifications<T>?) Gets all entities from the database that satisfy The core specifications. public Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities that satisfy the specifications. GetAllAsync(Expression<Func<T, bool>>) Gets all entities from the database that satisfy the given expression. public Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities that satisfy the expression. GetAllAsync(string, ICoreSpecifications<T>?) Gets all entities from the database based on the provided query and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities fetched based on the query and specifications. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets all entities from the database based on the provided query, parameters and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities fetched based on the query, parameters, and specifications. GetAllAsync<TEntity>() public Task<ICollection<TEntity>> GetAllAsync<TEntity>() where TEntity : class Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Gets all entities from the database by executing the provided IQueryable query. public Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> The IQueryable query to execute. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains the list of entities fetched by executing the query. Type Parameters TEntity GetAllQueryable() Get all entities as IQueryable. public IQueryable<T> GetAllQueryable() Returns IQueryable<T> IQueryable of all entities in the database. GetAllQueryable(ICoreSpecifications<T>?) Gets all entities from the database satisfying the specifications provided. public IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities satisfying the specifications. GetAllQueryable(Expression<Func<T, bool>>) Gets all entities from the database that matches the given expression as IQueryable. public IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns IQueryable<T> IQueryable of entities that match the expression. GetAllQueryable(string) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<T> GetAllQueryable(string query) Parameters query string The SQL query to execute. Returns IQueryable<T> IQueryable of entities fetched based on the query and specifications. GetAllQueryable(string, ICoreSpecifications<T>?) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities fetched based on the query and specifications. GetAllQueryable(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<T> IQueryable of entities fetched based on the query, parameters, and specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities fetched based on the query, parameters, and specifications. GetAllQueryable<TEntity>() Get all entities as IQueryable. public IQueryable<TEntity> GetAllQueryable<TEntity>() where TEntity : class Returns IQueryable<TEntity> IQueryable of all entities in the database. Type Parameters TEntity GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?) Gets all entities from the database satisfying the specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities satisfying the specifications. Type Parameters TEntity GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>) Gets all entities from the database that matches the given expression as IQueryable. public IQueryable<TEntity> GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> The expression to evaluate. Returns IQueryable<TEntity> IQueryable of entities that match the expression. Type Parameters TEntity GetAllQueryable<TEntity>(string) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query) where TEntity : class Parameters query string The SQL query to execute. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query, parameters, and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query, parameters, and specifications. Type Parameters TEntity GetBy(ICoreSpecifications<T>?) Gets the first entity that satisfies the provided specifications. public Task<T?> GetBy(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first entity that satisfies the specifications or null if no such entity exists. GetBy(Expression<Func<T, bool>>) Gets the first entity that satisfies the provided expression. public Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first entity that satisfies the expression or null if no such entity exists. GetBy(string, ICollection<DbParameter>, ICoreSpecifications<T>?) public Task<T?> GetBy(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<T> GetBy<TEntity>(ICoreSpecifications<TEntity>?) public Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified page. public Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>?) public Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>?) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>?) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Pages all entities based on the provided page information and specifications. public Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page information. coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a list of entities paged according to the provided information and specifications. PageAllQueryable(Page, ICoreSpecifications<T>?) Returns an IQueryable of all paged entities based on the provided page information and specifications. public IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page information. coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns IQueryable<T> IQueryable of entities paged according to the provided page information and specifications. Remove(T) Removes the given entity from the database and saves the changes. public void Remove(T entity) Parameters entity T The entity to remove. RemoveAndSaveAsync(T) public Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) public Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Removes a range of entities from the database and saves the changes. public void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to removal. RemoveRangeAndSaveAsync(ICollection<T>) public Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) public void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) public void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveChangesAsync() Saves changes in the DbContext to the database. public Task SaveChangesAsync() Returns Task A task represents the asynchronous operation for saving changes to the database. Update(T) Updates the provided entity in the DbContext and saves the changes to the database. public void Update(T entity) Parameters entity T The entity to update. UpdateAndSaveAsync(T) public Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) public Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Updates the range of entities in the DbContext and saves the changes to the database. public void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to update. UpdateRangeAndSaveAsync(ICollection<T>) public Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) public void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) public void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Repository/Solstice.Infrastructure.Core.CoreRepositoryExtension.html": {
    "href": "Repository/Solstice.Infrastructure.Core.CoreRepositoryExtension.html",
    "title": "Class CoreRepositoryExtension | Solstice",
    "summary": "Class CoreRepositoryExtension Namespace Solstice.Infrastructure.Core Assembly Solstice.Infrastructure.dll public static class CoreRepositoryExtension Inheritance object CoreRepositoryExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToCollectionAsync<T>(IQueryable<T>, CancellationToken) Converts provided IQueryable of entities into a list of entities in an asynchronous manner, respecting the provided cancellation token. public static Task<ICollection<T>> ToCollectionAsync<T>(this IQueryable<T> query, CancellationToken cancellationToken) Parameters query IQueryable<T> The IQueryable of entities to be converted into a list cancellationToken CancellationToken The cancellation token Returns Task<ICollection<T>> A task that represents the asynchronous operation, with a return value of the list containing the entities Type Parameters T The type of entities"
  },
  "Repository/Solstice.Infrastructure.Core.ICoreRepository-1.html": {
    "href": "Repository/Solstice.Infrastructure.Core.ICoreRepository-1.html",
    "title": "Interface ICoreRepository<T> | Solstice",
    "summary": "Interface ICoreRepository<T> Namespace Solstice.Infrastructure.Core Assembly Solstice.Infrastructure.dll The ICoreRepository interface provides methods for performing CRUD operations, querying, counting, paging, transactions, and other tasks on an underlying data repository in an asynchronous manner. The repository holds objects of a type. The methods in this interface produce or consume tasks that represent ongoing work and are used for structuring asynchronous code. public interface ICoreRepository<T> where T : class Type Parameters T A type parameter. This type parameter is used to define the type of objects managed by the repository. Remarks The methods grouped in the 'Create, Update, Delete' region are for managing entities within the repository. The 'Actions' region contains methods for counting entities in the repository or check its status (AnyAsyncBy). The 'Get By' region provides methods to retrieve an entity by a specific criteria. The 'Get all' region offers APIs to get collections of entities based on different criteria/patterns. In 'Queryable' area, you find methods for searching within the repository, but the operations are not executed right away and more criteria can be added later in the operation chain. 'Pageable' region offers the option to receive the data in chunks, good for large data sets to retrieve and process in smaller parts. 'Transactions' region provides a mechanism for batch of operations to be executed together and in an atomic manner. 'Others' region provides methods that handle various other tasks not covered by the previously described groupings. Methods AddAndSaveAsync(T) Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Add entity to repository Task AddAsync(T entity) Parameters entity T The entity object Returns Task AddAsync<TEntity>(TEntity) Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Add range of entities to repository Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities list Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsync(Expression<Func<T, bool>>) Checks if any entity in the repository matches the provided expression Task<bool> AnyAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<bool> True if any entity matches the condition, False otherwise AnyAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<bool> AnyAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsync<TEntity>(IQueryable<TEntity>) Task<bool> AnyAsync<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction asynchronously. Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result is an IDbContextTransaction object which encapsulates all information about the transaction. ChangeTracker() ChangeTracker ChangeTracker() Returns ChangeTracker CountAsync() Counts all entities in repository Task<decimal> CountAsync() Returns Task<decimal> Total count of all entities CountAsync(Expression<Func<T, bool>>) Counts the total entities that match the provided expression Task<decimal> CountAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<decimal> Total matched entities count CountAsync<TEntity>() Task<decimal> CountAsync<TEntity>() where TEntity : class Returns Task<decimal> Type Parameters TEntity CountAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<decimal> CountAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity ExecuteQuery(string, ICollection<DbParameter>?) Task ExecuteQuery(string query, ICollection<DbParameter>? dbParameters) Parameters query string dbParameters ICollection<DbParameter> Returns Task FindAsync(int) Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync() Task<ICollection<T>> GetAllAsync() Returns Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asynchronously. Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying The core specifications or an empty collection if no matches. GetAllAsync(Expression<Func<T, bool>>) Retrieves a collection of entities from the repository that satisfy the specified condition asynchronously. Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition or an empty collection if there are no matches. GetAllAsync(string, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query and specifications. Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query and The core specifications or an empty collection if no matches. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query, parameters and specifications. Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query, parameters and The core specifications or an empty collection if no matches. GetAllAsync<TEntity>() Task<ICollection<TEntity>> GetAllAsync<TEntity>() where TEntity : class Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Retrieves a collection of entities from a specified IQueryable. Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> An IQueryable that retrieves entities from the repository. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of entities that satisfy the query or an empty collection if no matches. Type Parameters TEntity GetAllQueryable() Retrieves all entities from the repository asynchronously. IQueryable<T> GetAllQueryable() Returns IQueryable<T> A queryable collection of all entities in the repository. GetAllQueryable(ICoreSpecifications<T>?) Retrieves entities that match the specified specifications from the repository asynchronously. IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities that satisfy The core specifications. GetAllQueryable(Expression<Func<T, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<T> A queryable collection of entities matching the condition. GetAllQueryable(string) Gets entities from the database based on the SQL query and specifications provided. IQueryable<T> GetAllQueryable(string query) Parameters query string The SQL query to execute. Returns IQueryable<T> IQueryable of entities fetched based on the query and specifications. GetAllQueryable(string, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query and The core specifications. GetAllQueryable(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<T> IQueryable of entities fetched based on the query, parameters, and specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query, parameters and The core specifications. GetAllQueryable<TEntity>() Retrieves all entities from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>() where TEntity : class Returns IQueryable<TEntity> A queryable collection of all entities in the repository. Type Parameters TEntity GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?) Retrieves entities that match the specified specifications from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities that satisfy The core specifications. Type Parameters TEntity GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<TEntity> A queryable collection of entities matching the condition. Type Parameters TEntity GetAllQueryable<TEntity>(string) Gets entities from the database based on the SQL query and specifications provided. IQueryable<TEntity> GetAllQueryable<TEntity>(string query) where TEntity : class Parameters query string The SQL query to execute. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities satisfying the query and The core specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query, parameters, and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities satisfying the query, parameters and The core specifications. Type Parameters TEntity GetBy(ICoreSpecifications<T>) Retrieves an entity from the repository that meets the criteria specified by the given specification. Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that an entity must meet to be retrieved from the repository. Returns Task<T> A task that represents the asynchronous operation. The task result is the first entity that satisfies the specified specifications. If no entity satisfies the specifications, the task result is null. GetBy(Expression<Func<T, bool>>) Retrieves an entity that matches the specified condition from the repository. Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first matching entity or null if no entity matches the condition. GetBy(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Task<T?> GetBy(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<T> GetBy<TEntity>(ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified page. Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Retrieves a collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition. or an empty collection if no matches, paged by the given information in Page object. PageAllQueryable(Page, ICoreSpecifications<T>?) Retrieves a queryable collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of all entities in the repository that fulfill the condition, paged by the given information in Page object. Remove(T) Remove entity from repository void Remove(T entity) Parameters entity T The entity object RemoveAndSaveAsync(T) Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Remove range of entities from repository void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list RemoveRangeAndSaveAsync(ICollection<T>) Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveChangesAsync() Save changes in repository Task SaveChangesAsync() Returns Task Update(T) Update entity in repository void Update(T entity) Parameters entity T The entity object UpdateAndSaveAsync(T) Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Update range of entities in repository void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list UpdateRangeAndSaveAsync(ICollection<T>) Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Repository/Solstice.Infrastructure.Core.html": {
    "href": "Repository/Solstice.Infrastructure.Core.html",
    "title": "Namespace Solstice.Infrastructure.Core | Solstice",
    "summary": "Namespace Solstice.Infrastructure.Core Classes CoreRepositoryExtension CoreRepository<T, TContext> An abstract class for the CoreRepository. Constructs a repository with a given context and Http context. Interfaces ICoreRepository<T> The ICoreRepository interface provides methods for performing CRUD operations, querying, counting, paging, transactions, and other tasks on an underlying data repository in an asynchronous manner. The repository holds objects of a type. The methods in this interface produce or consume tasks that represent ongoing work and are used for structuring asynchronous code."
  },
  "Repository/Solstice.Infrastructure.Extensions.CoreQueryableExtension.html": {
    "href": "Repository/Solstice.Infrastructure.Extensions.CoreQueryableExtension.html",
    "title": "Class CoreQueryableExtension | Solstice",
    "summary": "Class CoreQueryableExtension Namespace Solstice.Infrastructure.Extensions Assembly Solstice.Infrastructure.dll Represents a utility class that provides extension methods to IQueryable interface objects. public static class CoreQueryableExtension Inheritance object CoreQueryableExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks CoreQueryableExtension offers pagination for queries. Methods Pageable<TSource>(IQueryable<TSource>, Page) Returns a paged source from the provided IQueryable object using the given CorePage object parameters. public static IQueryable<TSource> Pageable<TSource>(this IQueryable<TSource> queryable, Page page) Parameters queryable IQueryable<TSource> The System.Linq.IQueryable{T} to create a paged source from. page Page CorePage object that determines the number of elements to bypass and the size of the page. Returns IQueryable<TSource> An System.Linq.IQueryable{T} that contains elements from the input sequence that occur after the specified index and has the specified page size. Type Parameters TSource The type of the elements of source."
  },
  "Repository/Solstice.Infrastructure.Extensions.html": {
    "href": "Repository/Solstice.Infrastructure.Extensions.html",
    "title": "Namespace Solstice.Infrastructure.Extensions | Solstice",
    "summary": "Namespace Solstice.Infrastructure.Extensions Classes CoreQueryableExtension Represents a utility class that provides extension methods to IQueryable interface objects."
  },
  "Repository/Solstice.Infrastructure.Injections.RepositoryInjections.html": {
    "href": "Repository/Solstice.Infrastructure.Injections.RepositoryInjections.html",
    "title": "Class RepositoryInjections | Solstice",
    "summary": "Class RepositoryInjections Namespace Solstice.Infrastructure.Injections Assembly Solstice.Infrastructure.dll The RepositoryInjections static class contains extension methods for ModelBuilder and IServiceCollection instances. These extension methods add convenient functionality for database and service-related configurations. public static class RepositoryInjections Inheritance object RepositoryInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddQueryDtoToDbContext(ModelBuilder) This extension method for the ModelBuilder class scans all assemblies in the current domain for types marked with the QueryAttribute. Each located type is then added to the ModelBuilder as an entity, with no key, and set to be excluded from migrations. public static void AddQueryDtoToDbContext(this ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder instance to which the types are added. Exceptions CoreException Thrown when no types with the QueryAttribute are found. AddRepositories<TDbContext>(IServiceCollection) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void AddRepositories<TDbContext>(this IServiceCollection services) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found. AddRepositories<TDbContext>(IServiceCollection, string) [Obsolete(\"AddRepositories with namespace is deprecated, please use AddRepositories with Repository Attribute instead.\")] public static void AddRepositories<TDbContext>(this IServiceCollection services, string assemblyName) where TDbContext : DbContext Parameters services IServiceCollection assemblyName string Type Parameters TDbContext AddUnitOfWork<TDbContext>(IServiceCollection) The AddUnitOfWork extension method for the IServiceCollection, which adds the UnitOfWork as a Scoped service. public static void AddUnitOfWork<TDbContext>(this IServiceCollection services) where TDbContext : DbContext Parameters services IServiceCollection Type Parameters TDbContext ApplyDbConfigurations(ModelBuilder, Assembly) This extension method to the ModelBuilder class allows the application to apply database configurations from a specified assembly. public static void ApplyDbConfigurations(this ModelBuilder modelBuilder, Assembly assembly) Parameters modelBuilder ModelBuilder The ModelBuilder instance on which to apply the assembly configurations. assembly Assembly The assembly from which configurations should be applied. Remarks The method loads the specified assembly and applies its configurations to the dbContext via the ModelBuilder ApplyConfigurationsFromAssembly method. ApplyDbConfigurations(ModelBuilder, string) This extension method to the ModelBuilder class allows the application to apply database configurations from a specified assembly. public static void ApplyDbConfigurations(this ModelBuilder modelBuilder, string assemblyName) Parameters modelBuilder ModelBuilder The ModelBuilder instance on which to apply the assembly configurations. assemblyName string The name of the assembly from which configurations should be applied. Remarks The method loads the specified assembly and applies its configurations to the dbContext via the ModelBuilder ApplyConfigurationsFromAssembly method. ScanRepositoriesIn<TDbContext>(IServiceCollection, Assembly) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void ScanRepositoriesIn<TDbContext>(this IServiceCollection services, Assembly assembly) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. assembly Assembly The assembly to scan Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found. ScanRepositoriesIn<TDbContext>(IServiceCollection, string) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void ScanRepositoriesIn<TDbContext>(this IServiceCollection services, string assemblyName) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. assemblyName string The name of the assembly to scan Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found."
  },
  "Repository/Solstice.Infrastructure.Injections.html": {
    "href": "Repository/Solstice.Infrastructure.Injections.html",
    "title": "Namespace Solstice.Infrastructure.Injections | Solstice",
    "summary": "Namespace Solstice.Infrastructure.Injections Classes RepositoryInjections The RepositoryInjections static class contains extension methods for ModelBuilder and IServiceCollection instances. These extension methods add convenient functionality for database and service-related configurations."
  },
  "Repository/Solstice.Infrastructure.Specifications.CoreSpecificationEvaluator-1.html": {
    "href": "Repository/Solstice.Infrastructure.Specifications.CoreSpecificationEvaluator-1.html",
    "title": "Class CoreSpecificationEvaluator<T> | Solstice",
    "summary": "Class CoreSpecificationEvaluator<T> Namespace Solstice.Infrastructure.Specifications Assembly Solstice.Infrastructure.dll public class CoreSpecificationEvaluator<T> where T : class Type Parameters T Inheritance object CoreSpecificationEvaluator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreSpecificationEvaluator() protected CoreSpecificationEvaluator() Methods GetQuery(IQueryable<T>, ICoreSpecifications<T>) public static IQueryable<T> GetQuery(IQueryable<T> query, ICoreSpecifications<T> specifications) Parameters query IQueryable<T> specifications ICoreSpecifications<T> Returns IQueryable<T>"
  },
  "Repository/Solstice.Infrastructure.Specifications.ICoreSpecifications-1.html": {
    "href": "Repository/Solstice.Infrastructure.Specifications.ICoreSpecifications-1.html",
    "title": "Interface ICoreSpecifications<T> | Solstice",
    "summary": "Interface ICoreSpecifications<T> Namespace Solstice.Infrastructure.Specifications Assembly Solstice.Infrastructure.dll public interface ICoreSpecifications<T> Type Parameters T Properties ComplexIncludes Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> ComplexIncludes { get; } Property Value Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> Distincts bool Distincts { get; } Property Value bool FilterCondition Expression<Func<T, bool>> FilterCondition { get; } Property Value Expression<Func<T, bool>> GroupBys Expression<Func<T, object>> GroupBys { get; } Property Value Expression<Func<T, object>> OrderByDescendings Collection<Expression<Func<T, object>>> OrderByDescendings { get; } Property Value Collection<Expression<Func<T, object>>> OrderBys Collection<Expression<Func<T, object>>> OrderBys { get; } Property Value Collection<Expression<Func<T, object>>> SimpleIncludes Collection<Expression<Func<T, object>>> SimpleIncludes { get; } Property Value Collection<Expression<Func<T, object>>>"
  },
  "Repository/Solstice.Infrastructure.Specifications.Specification-1.html": {
    "href": "Repository/Solstice.Infrastructure.Specifications.Specification-1.html",
    "title": "Class Specification<T> | Solstice",
    "summary": "Class Specification<T> Namespace Solstice.Infrastructure.Specifications Assembly Solstice.Infrastructure.dll The coreSpecifications<T> class implements the ICoreSpecifications<T> interface for providing generic ways to define specifications for querying the database. public class Specification<T> : ICoreSpecifications<T> Type Parameters T The type of the object which specifications are applied to. Something like an EF Core model type. Inheritance object Specification<T> Implements ICoreSpecifications<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples This sample shows how to create a new instance of coreSpecifications<T>. var specs = new coreSpecifications<MyModel>(); specs.SetFilterCondition(x => x.Property > 0); specs.ApplyOrderBy(x => x.AnotherProperty); Remarks Properties and methods in this class allow for including related data, ordering, filtering, and grouping the result of queries against a DBSet of the specified type T. Note: The 'Include', 'OrderBy', 'OrderByDescending', 'FilterCondition', and 'GroupBy' are Expressions and something like LINQ queries. Constructors Specification() public Specification() Specification(Expression<Func<T, bool>>?) public Specification(Expression<Func<T, bool>>? filterCondition) Parameters filterCondition Expression<Func<T, bool>> Properties ComplexIncludes public Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> ComplexIncludes { get; } Property Value Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> Distincts public bool Distincts { get; } Property Value bool FilterCondition public Expression<Func<T, bool>> FilterCondition { get; } Property Value Expression<Func<T, bool>> GroupBys public Expression<Func<T, object>> GroupBys { get; } Property Value Expression<Func<T, object>> OrderByDescendings public Collection<Expression<Func<T, object>>> OrderByDescendings { get; } Property Value Collection<Expression<Func<T, object>>> OrderBys public Collection<Expression<Func<T, object>>> OrderBys { get; } Property Value Collection<Expression<Func<T, object>>> SimpleIncludes public Collection<Expression<Func<T, object>>> SimpleIncludes { get; } Property Value Collection<Expression<Func<T, object>>> Methods Distinct() Permet d'ajouter un Distinct à la requête public Specification<T> Distinct() Returns Specification<T> GroupBy(Expression<Func<T, object>>) Permet d'ajouter un GroupBy à la requête public Specification<T> GroupBy(Expression<Func<T, object>> groupByExpression) Parameters groupByExpression Expression<Func<T, object>> Returns Specification<T> Include(Func<IQueryable<T>, IIncludableQueryable<T, object>>) Permet d'effectuer un .Include sur une entité public Specification<T> Include(Func<IQueryable<T>, IIncludableQueryable<T, object>> includeExpression) Parameters includeExpression Func<IQueryable<T>, IIncludableQueryable<T, object>> Returns Specification<T> Remarks Exemple: new Specification().Include(item => item.Include(item => item.User).ThenInclude(item => item.Address)) Include(Expression<Func<T, object>>) Permet d'effectuer un .Include sur une entité public Specification<T> Include(Expression<Func<T, object>> includeExpression) Parameters includeExpression Expression<Func<T, object>> Returns Specification<T> Remarks Exemple: new Specification().Include(item => item.User) OrderBy(Expression<Func<T, object>>) Permet d'ajouter un OrderBy à la requête Si on en ajoute plusieurs, ils seront exécutés dans l'ordre d'ajout (OrderBy, ThenBy, ThenBy, ...) public Specification<T> OrderBy(Expression<Func<T, object>> orderByExpression) Parameters orderByExpression Expression<Func<T, object>> Returns Specification<T> OrderByDescending(Expression<Func<T, object>>) Permet d'ajouter un OrderByDescending à la requête Si on en ajoute plusieurs, ils seront exécutés dans l'ordre d'ajout (OrderByDescending, ThenByDescending, ThenByDescending, ...) public Specification<T> OrderByDescending(Expression<Func<T, object>> orderByDescendingExpression) Parameters orderByDescendingExpression Expression<Func<T, object>> Returns Specification<T> SetFilterCondition(Expression<Func<T, bool>>) public void SetFilterCondition(Expression<Func<T, bool>> filterExpression) Parameters filterExpression Expression<Func<T, bool>>"
  },
  "Repository/Solstice.Infrastructure.Specifications.html": {
    "href": "Repository/Solstice.Infrastructure.Specifications.html",
    "title": "Namespace Solstice.Infrastructure.Specifications | Solstice",
    "summary": "Namespace Solstice.Infrastructure.Specifications Classes CoreSpecificationEvaluator<T> Specification<T> The coreSpecifications<T> class implements the ICoreSpecifications<T> interface for providing generic ways to define specifications for querying the database. Interfaces ICoreSpecifications<T>"
  },
  "Repository/Solstice.Infrastructure.UnitOfWorks.IUnitOfWork.html": {
    "href": "Repository/Solstice.Infrastructure.UnitOfWorks.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Solstice",
    "summary": "Interface IUnitOfWork Namespace Solstice.Infrastructure.UnitOfWorks Assembly Solstice.Infrastructure.dll public interface IUnitOfWork : IDisposable Inherited Members IDisposable.Dispose() Methods GetRepository<TRepository, TEntity>() TRepository GetRepository<TRepository, TEntity>() where TRepository : ICoreRepository<TEntity> where TEntity : class Returns TRepository Type Parameters TRepository TEntity"
  },
  "Repository/Solstice.Infrastructure.UnitOfWorks.UnitOfWork-1.html": {
    "href": "Repository/Solstice.Infrastructure.UnitOfWorks.UnitOfWork-1.html",
    "title": "Class UnitOfWork<TDbContext> | Solstice",
    "summary": "Class UnitOfWork<TDbContext> Namespace Solstice.Infrastructure.UnitOfWorks Assembly Solstice.Infrastructure.dll public sealed class UnitOfWork<TDbContext> : IUnitOfWork, IDisposable where TDbContext : DbContext Type Parameters TDbContext Inheritance object UnitOfWork<TDbContext> Implements IUnitOfWork IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWork(TDbContext, IHttpContextAccessor) public UnitOfWork(TDbContext dbContext, IHttpContextAccessor httpContext) Parameters dbContext TDbContext httpContext IHttpContextAccessor Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "Repository/Solstice.Infrastructure.UnitOfWorks.html": {
    "href": "Repository/Solstice.Infrastructure.UnitOfWorks.html",
    "title": "Namespace Solstice.Infrastructure.UnitOfWorks | Solstice",
    "summary": "Namespace Solstice.Infrastructure.UnitOfWorks Classes UnitOfWork<TDbContext> Interfaces IUnitOfWork"
  },
  "Repository/Solstice.Repository.Attributes.QueryAttribute.html": {
    "href": "Repository/Solstice.Repository.Attributes.QueryAttribute.html",
    "title": "Class QueryAttribute | Solstice",
    "summary": "Class QueryAttribute Namespace Solstice.Repository.Attributes Assembly Solstice.Repository.dll Represents a custom attribute. This attribute is used to indicate which classes are to be used for database queries. It is a sealed class derived from the Attribute class, hence no other class can inherit from it. [AttributeUsage(AttributeTargets.Class)] public sealed class QueryAttribute : Attribute Inheritance object Attribute QueryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Repository/Solstice.Repository.Attributes.RepositoryAttribute.html": {
    "href": "Repository/Solstice.Repository.Attributes.RepositoryAttribute.html",
    "title": "Class RepositoryAttribute | Solstice",
    "summary": "Class RepositoryAttribute Namespace Solstice.Repository.Attributes Assembly Solstice.Repository.dll The 'RepositoryAttribute' class, derived from 'Attribute', is a custom attribute class. It may be used to annotate repository classes. This class is 'sealed' which prevents further derivation. [AttributeUsage(AttributeTargets.Class)] public sealed class RepositoryAttribute : Attribute Inheritance object Attribute RepositoryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Repository/Solstice.Repository.Attributes.html": {
    "href": "Repository/Solstice.Repository.Attributes.html",
    "title": "Namespace Solstice.Repository.Attributes | Solstice",
    "summary": "Namespace Solstice.Repository.Attributes Classes QueryAttribute Represents a custom attribute. This attribute is used to indicate which classes are to be used for database queries. It is a sealed class derived from the Attribute class, hence no other class can inherit from it. RepositoryAttribute The 'RepositoryAttribute' class, derived from 'Attribute', is a custom attribute class. It may be used to annotate repository classes. This class is 'sealed' which prevents further derivation."
  },
  "Repository/Solstice.Repository.Core.CoreRepository-2.html": {
    "href": "Repository/Solstice.Repository.Core.CoreRepository-2.html",
    "title": "Class CoreRepository<T, TContext> | Solstice",
    "summary": "Class CoreRepository<T, TContext> Namespace Solstice.Repository.Core Assembly Solstice.Repository.dll An abstract class for the CoreRepository. Constructs a repository with a given context and Http context. public class CoreRepository<T, TContext> : ICoreRepository<T> where T : class where TContext : DbContext Type Parameters T A entity type TContext The DbContext type Inheritance object CoreRepository<T, TContext> Implements ICoreRepository<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreRepository(TContext, IHttpContextAccessor) Constructs a new instance of CoreRepository with the given context and Http context. protected CoreRepository(TContext dbContext, IHttpContextAccessor httpContext) Parameters dbContext TContext The DbContext to use. httpContext IHttpContextAccessor The HttpContext to use for cancellations. Methods AddAndSaveAsync(T) public Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) public Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Adds the given entity to the database and saves the changes. public Task AddAsync(T entity) Parameters entity T The entity to add. Returns Task AddAsync<TEntity>(TEntity) public Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) public Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Adds a range of entities to the database and saves the changes. public Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities to add. Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if any entities in the database match the given expression. public Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating whether any entities match the expression. AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) public Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction in the database. public Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result contains the IDbContextTransaction that encapsulates all changes made to the DbContext within the transaction. CountAllAsync() Counts all entities in the database. public Task<decimal> CountAllAsync() Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of all entities. CountAllAsyncBy(Expression<Func<T, bool>>?) Counts all entities in the database that satisfy the given expression. public Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>>? where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of entities that satisfy the expression. CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity CountAllAsync<TEntity>() Counts all entities in the database. public Task<decimal> CountAllAsync<TEntity>() where TEntity : class Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the count of all entities. Type Parameters TEntity ExecuteQuery(string, ICollection<DbParameter>?) public Task ExecuteQuery(string query, ICollection<DbParameter>? dbParameters) Parameters query string dbParameters ICollection<DbParameter> Returns Task FindAsync(int) public Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) public Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync() Gets all entities from the database. public Task<ICollection<T>> GetAllAsync() Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of all entities. GetAllAsync(ICoreSpecifications<T>?) Gets all entities from the database that satisfy The core specifications. public Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities that satisfy the specifications. GetAllAsync(Expression<Func<T, bool>>) Gets all entities from the database that satisfy the given expression. public Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities that satisfy the expression. GetAllAsync(string, ICoreSpecifications<T>?) Gets all entities from the database based on the provided query and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities fetched based on the query and specifications. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets all entities from the database based on the provided query, parameters and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains the list of entities fetched based on the query, parameters, and specifications. GetAllAsync<TEntity>() public Task<ICollection<TEntity>> GetAllAsync<TEntity>() where TEntity : class Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Gets all entities from the database by executing the provided IQueryable query. public Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> The IQueryable query to execute. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains the list of entities fetched by executing the query. Type Parameters TEntity GetAllQueryable() Get all entities as IQueryable. public IQueryable<T> GetAllQueryable() Returns IQueryable<T> IQueryable of all entities in the database. GetAllQueryable(ICoreSpecifications<T>?) Gets all entities from the database satisfying the specifications provided. public IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities satisfying the specifications. GetAllQueryable(Expression<Func<T, bool>>) Gets all entities from the database that matches the given expression as IQueryable. public IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns IQueryable<T> IQueryable of entities that match the expression. GetAllQueryable(string) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<T> GetAllQueryable(string query) Parameters query string The SQL query to execute. Returns IQueryable<T> IQueryable of entities fetched based on the query and specifications. GetAllQueryable(string, ICoreSpecifications<T>?) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities fetched based on the query and specifications. GetAllQueryable(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<T> IQueryable of entities fetched based on the query, parameters, and specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<T> The core specifications to evaluate. Returns IQueryable<T> IQueryable of entities fetched based on the query, parameters, and specifications. GetAllQueryable<TEntity>() Get all entities as IQueryable. public IQueryable<TEntity> GetAllQueryable<TEntity>() where TEntity : class Returns IQueryable<TEntity> IQueryable of all entities in the database. Type Parameters TEntity GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?) Gets all entities from the database satisfying the specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities satisfying the specifications. Type Parameters TEntity GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>) Gets all entities from the database that matches the given expression as IQueryable. public IQueryable<TEntity> GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> The expression to evaluate. Returns IQueryable<TEntity> IQueryable of entities that match the expression. Type Parameters TEntity GetAllQueryable<TEntity>(string) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query) where TEntity : class Parameters query string The SQL query to execute. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?) Gets entities from the database based on the SQL query and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string The SQL query to execute. coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query, parameters, and specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) Gets entities from the database based on the SQL query, parameters, and specifications provided. public IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string The SQL query to execute. parameters ICollection<DbParameter> The SQL parameters needed for the query. coreSpecifications ICoreSpecifications<TEntity> The core specifications to evaluate. Returns IQueryable<TEntity> IQueryable of entities fetched based on the query, parameters, and specifications. Type Parameters TEntity GetBy(ICoreSpecifications<T>?) Gets the first entity that satisfies the provided specifications. public Task<T?> GetBy(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first entity that satisfies the specifications or null if no such entity exists. GetBy(Expression<Func<T, bool>>) Gets the first entity that satisfies the provided expression. public Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression to evaluate. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first entity that satisfies the expression or null if no such entity exists. GetBy<TEntity>(ICoreSpecifications<TEntity>?) public Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified Radiant page. public Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given Radiant page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>?) public Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>?) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>?) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Pages all entities based on the provided page information and specifications. public Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page information. coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a list of entities paged according to the provided information and specifications. PageAllQueryable(Page, ICoreSpecifications<T>?) Returns an IQueryable of all paged entities based on the provided page information and specifications. public IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page information. coreSpecifications ICoreSpecifications<T> The specifications to evaluate. Returns IQueryable<T> IQueryable of entities paged according to the provided page information and specifications. Remove(T) Removes the given entity from the database and saves the changes. public void Remove(T entity) Parameters entity T The entity to remove. RemoveAndSaveAsync(T) public Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) public Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Removes a range of entities from the database and saves the changes. public void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to removal. RemoveRangeAndSaveAsync(ICollection<T>) public Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) public void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) public void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Saves changes in the DbContext to the database. public Task SaveAsync() Returns Task A task represents the asynchronous operation for saving changes to the database. Update(T) Updates the provided entity in the DbContext and saves the changes to the database. public void Update(T entity) Parameters entity T The entity to update. UpdateAndSaveAsync(T) public Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) public Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Updates the range of entities in the DbContext and saves the changes to the database. public void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to update. UpdateRangeAndSaveAsync(ICollection<T>) public Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) public void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) public void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Repository/Solstice.Repository.Core.CoreRepositoryExtension.html": {
    "href": "Repository/Solstice.Repository.Core.CoreRepositoryExtension.html",
    "title": "Class CoreRepositoryExtension | Solstice",
    "summary": "Class CoreRepositoryExtension Namespace Solstice.Repository.Core Assembly Solstice.Repository.dll public static class CoreRepositoryExtension Inheritance object CoreRepositoryExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToCollectionAsync<T>(IQueryable<T>, CancellationToken) Converts provided IQueryable of entities into a list of entities in an asynchronous manner, respecting the provided cancellation token. public static Task<ICollection<T>> ToCollectionAsync<T>(this IQueryable<T> query, CancellationToken cancellationToken) Parameters query IQueryable<T> The IQueryable of entities to be converted into a list cancellationToken CancellationToken The cancellation token Returns Task<ICollection<T>> A task that represents the asynchronous operation, with a return value of the list containing the entities Type Parameters T The type of entities"
  },
  "Repository/Solstice.Repository.Core.ICoreRepository-1.html": {
    "href": "Repository/Solstice.Repository.Core.ICoreRepository-1.html",
    "title": "Interface ICoreRepository<T> | Solstice",
    "summary": "Interface ICoreRepository<T> Namespace Solstice.Repository.Core Assembly Solstice.Repository.dll The ICoreRepository interface provides methods for performing CRUD operations, querying, counting, paging, transactions, and other tasks on an underlying data repository in an asynchronous manner. The repository holds objects of a type. The methods in this interface produce or consume tasks that represent ongoing work and are used for structuring asynchronous code. public interface ICoreRepository<T> where T : class Type Parameters T A type parameter. This type parameter is used to define the type of objects managed by the repository. Remarks The methods grouped in the 'Create, Update, Delete' region are for managing entities within the repository. The 'Actions' region contains methods for counting entities in the repository or check its status (AnyAsyncBy). The 'Get By' region provides methods to retrieve an entity by a specific criteria. The 'Get all' region offers APIs to get collections of entities based on different criteria/patterns. In 'Queryable' area, you find methods for searching within the repository, but the operations are not executed right away and more criteria can be added later in the operation chain. 'Pageable' region offers the option to receive the data in chunks, good for large data sets to retrieve and process in smaller parts. 'Transactions' region provides a mechanism for batch of operations to be executed together and in an atomic manner. 'Others' region provides methods that handle various other tasks not covered by the previously described groupings. Methods AddAndSaveAsync(T) Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Add entity to repository Task AddAsync(T entity) Parameters entity T The entity object Returns Task AddAsync<TEntity>(TEntity) Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Add range of entities to repository Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities list Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if any entity in the repository matches the provided expression Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<bool> True if any entity matches the condition, False otherwise AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction asynchronously. Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result is an IDbContextTransaction object which encapsulates all information about the transaction. CountAllAsync() Counts all entities in repository Task<decimal> CountAllAsync() Returns Task<decimal> Total count of all entities CountAllAsyncBy(Expression<Func<T, bool>>) Counts the total entities that match the provided expression Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<decimal> Total matched entities count CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity ExecuteQuery(string, ICollection<DbParameter>?) Task ExecuteQuery(string query, ICollection<DbParameter>? dbParameters) Parameters query string dbParameters ICollection<DbParameter> Returns Task FindAsync(int) Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync() Task<ICollection<T>> GetAllAsync() Returns Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asynchronously. Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying The core specifications or an empty collection if no matches. GetAllAsync(Expression<Func<T, bool>>) Retrieves a collection of entities from the repository that satisfy the specified condition asynchronously. Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition or an empty collection if there are no matches. GetAllAsync(string, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query and specifications. Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query and The core specifications or an empty collection if no matches. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query, parameters and specifications. Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query, parameters and The core specifications or an empty collection if no matches. GetAllAsync<TEntity>() Task<ICollection<TEntity>> GetAllAsync<TEntity>() where TEntity : class Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Retrieves a collection of entities from a specified IQueryable. Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> An IQueryable that retrieves entities from the repository. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of entities that satisfy the query or an empty collection if no matches. Type Parameters TEntity GetAllQueryable() Retrieves all entities from the repository asynchronously. IQueryable<T> GetAllQueryable() Returns IQueryable<T> A queryable collection of all entities in the repository. GetAllQueryable(ICoreSpecifications<T>?) Retrieves entities that match the specified Radiant specifications from the repository asynchronously. IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities that satisfy The core specifications. GetAllQueryable(Expression<Func<T, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<T> A queryable collection of entities matching the condition. GetAllQueryable(string, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query and The core specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query, parameters and The core specifications. GetAllQueryable<TEntity>() Retrieves all entities from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>() where TEntity : class Returns IQueryable<TEntity> A queryable collection of all entities in the repository. Type Parameters TEntity GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?) Retrieves entities that match the specified Radiant specifications from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities that satisfy The core specifications. Type Parameters TEntity GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<TEntity> A queryable collection of entities matching the condition. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities satisfying the query and The core specifications. Type Parameters TEntity GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<TEntity> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<TEntity> A queryable collection of entities satisfying the query, parameters and The core specifications. Type Parameters TEntity GetBy(ICoreSpecifications<T>) Retrieves an entity from the repository that meets the criteria specified by the given Radiant specification. Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that an entity must meet to be retrieved from the repository. Returns Task<T> A task that represents the asynchronous operation. The task result is the first entity that satisfies the specified Radiant specifications. If no entity satisfies the specifications, the task result is null. GetBy(Expression<Func<T, bool>>) Retrieves an entity that matches the specified condition from the repository. Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first matching entity or null if no entity matches the condition. GetBy<TEntity>(ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified Radiant page. Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given Radiant page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Retrieves a collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition. or an empty collection if no matches, paged by the given information in RadiantPage object. PageAllQueryable(Page, ICoreSpecifications<T>?) Retrieves a queryable collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of all entities in the repository that fulfill the condition, paged by the given information in RadiantPage object. Remove(T) Remove entity from repository void Remove(T entity) Parameters entity T The entity object RemoveAndSaveAsync(T) Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Remove range of entities from repository void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list RemoveRangeAndSaveAsync(ICollection<T>) Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Save changes in repository Task SaveAsync() Returns Task Update(T) Update entity in repository void Update(T entity) Parameters entity T The entity object UpdateAndSaveAsync(T) Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Update range of entities in repository void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list UpdateRangeAndSaveAsync(ICollection<T>) Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Repository/Solstice.Repository.Core.html": {
    "href": "Repository/Solstice.Repository.Core.html",
    "title": "Namespace Solstice.Repository.Core | Solstice",
    "summary": "Namespace Solstice.Repository.Core Classes CoreRepositoryExtension CoreRepository<T, TContext> An abstract class for the CoreRepository. Constructs a repository with a given context and Http context. Interfaces ICoreRepository<T> The ICoreRepository interface provides methods for performing CRUD operations, querying, counting, paging, transactions, and other tasks on an underlying data repository in an asynchronous manner. The repository holds objects of a type. The methods in this interface produce or consume tasks that represent ongoing work and are used for structuring asynchronous code."
  },
  "Repository/Solstice.Repository.Extensions.CoreQueryableExtension.html": {
    "href": "Repository/Solstice.Repository.Extensions.CoreQueryableExtension.html",
    "title": "Class CoreQueryableExtension | Solstice",
    "summary": "Class CoreQueryableExtension Namespace Solstice.Repository.Extensions Assembly Solstice.Repository.dll Represents a utility class that provides extension methods to IQueryable interface objects. public static class CoreQueryableExtension Inheritance object CoreQueryableExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks CoreQueryableExtension offers pagination for queries. Methods Pageable<TSource>(IQueryable<TSource>, Page) Returns a paged source from the provided IQueryable object using the given CorePage object parameters. public static IQueryable<TSource> Pageable<TSource>(this IQueryable<TSource> queryable, Page page) Parameters queryable IQueryable<TSource> The System.Linq.IQueryable{T} to create a paged source from. page Page CorePage object that determines the number of elements to bypass and the size of the page. Returns IQueryable<TSource> An System.Linq.IQueryable{T} that contains elements from the input sequence that occur after the specified index and has the specified page size. Type Parameters TSource The type of the elements of source."
  },
  "Repository/Solstice.Repository.Extensions.html": {
    "href": "Repository/Solstice.Repository.Extensions.html",
    "title": "Namespace Solstice.Repository.Extensions | Solstice",
    "summary": "Namespace Solstice.Repository.Extensions Classes CoreQueryableExtension Represents a utility class that provides extension methods to IQueryable interface objects."
  },
  "Repository/Solstice.Repository.IUnitOfWork.html": {
    "href": "Repository/Solstice.Repository.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Solstice",
    "summary": "Interface IUnitOfWork Namespace Solstice.Repository Assembly Solstice.Repository.dll public interface IUnitOfWork : IDisposable Inherited Members IDisposable.Dispose() Methods GetRepository<TRepository, TEntity>() TRepository GetRepository<TRepository, TEntity>() where TRepository : ICoreRepository<TEntity> where TEntity : class Returns TRepository Type Parameters TRepository TEntity"
  },
  "Repository/Solstice.Repository.Injections.RepositoryInjections.html": {
    "href": "Repository/Solstice.Repository.Injections.RepositoryInjections.html",
    "title": "Class RepositoryInjections | Solstice",
    "summary": "Class RepositoryInjections Namespace Solstice.Repository.Injections Assembly Solstice.Repository.dll The RepositoryInjections static class contains extension methods for ModelBuilder and IServiceCollection instances. These extension methods add convenient functionality for database and service-related configurations. public static class RepositoryInjections Inheritance object RepositoryInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddQueryDtoToDbContext(ModelBuilder) This extension method for the ModelBuilder class scans all assemblies in the current domain for types marked with the QueryAttribute. Each located type is then added to the ModelBuilder as an entity, with no key, and set to be excluded from migrations. public static void AddQueryDtoToDbContext(this ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder instance to which the types are added. Exceptions CoreException Thrown when no types with the QueryAttribute are found. AddRepositories<TDbContext>(IServiceCollection) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void AddRepositories<TDbContext>(this IServiceCollection services) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found. AddRepositories<TDbContext>(IServiceCollection, string) [Obsolete(\"AddRepositories with namespace is deprecated, please use AddRepositories with Repository Attribute instead.\")] public static void AddRepositories<TDbContext>(this IServiceCollection services, string assemblyName) where TDbContext : DbContext Parameters services IServiceCollection assemblyName string Type Parameters TDbContext AddUnitOfWork<TDbContext>(IServiceCollection) The AddUnitOfWork extension method for the IServiceCollection, which adds the UnitOfWork as a Scoped service. public static void AddUnitOfWork<TDbContext>(this IServiceCollection services) where TDbContext : DbContext Parameters services IServiceCollection Type Parameters TDbContext ApplyDbConfigurations(ModelBuilder, Assembly) This extension method to the ModelBuilder class allows the application to apply database configurations from a specified assembly. public static void ApplyDbConfigurations(this ModelBuilder modelBuilder, Assembly assembly) Parameters modelBuilder ModelBuilder The ModelBuilder instance on which to apply the assembly configurations. assembly Assembly The assembly from which configurations should be applied. Remarks The method loads the specified assembly and applies its configurations to the dbContext via the ModelBuilder ApplyConfigurationsFromAssembly method. ApplyDbConfigurations(ModelBuilder, string) This extension method to the ModelBuilder class allows the application to apply database configurations from a specified assembly. public static void ApplyDbConfigurations(this ModelBuilder modelBuilder, string assemblyName) Parameters modelBuilder ModelBuilder The ModelBuilder instance on which to apply the assembly configurations. assemblyName string The name of the assembly from which configurations should be applied. Remarks The method loads the specified assembly and applies its configurations to the dbContext via the ModelBuilder ApplyConfigurationsFromAssembly method. ScanRepositoriesIn<TDbContext>(IServiceCollection, Assembly) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void ScanRepositoriesIn<TDbContext>(this IServiceCollection services, Assembly assembly) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. assembly Assembly The assembly to scan Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found. ScanRepositoriesIn<TDbContext>(IServiceCollection, string) The AddRepositories extension method for the IServiceCollection, which scans all assemblies in the current domain for types marked with the RepositoryAttribute. public static void ScanRepositoriesIn<TDbContext>(this IServiceCollection services, string assemblyName) where TDbContext : DbContext Parameters services IServiceCollection The IServiceCollection instance to which the types are added. assemblyName string The name of the assembly to scan Type Parameters TDbContext Remarks The located type(s) that have the RepositoryAttribute are added to the IServiceCollection as a Scope. If no such types are found, it throws a CoreInjectionsException. Exceptions CoreException Thrown when no types with the RepositoryAttribute are found."
  },
  "Repository/Solstice.Repository.Injections.html": {
    "href": "Repository/Solstice.Repository.Injections.html",
    "title": "Namespace Solstice.Repository.Injections | Solstice",
    "summary": "Namespace Solstice.Repository.Injections Classes RepositoryInjections The RepositoryInjections static class contains extension methods for ModelBuilder and IServiceCollection instances. These extension methods add convenient functionality for database and service-related configurations."
  },
  "Repository/Solstice.Repository.Specifications.CoreSpecificationEvaluator-1.html": {
    "href": "Repository/Solstice.Repository.Specifications.CoreSpecificationEvaluator-1.html",
    "title": "Class CoreSpecificationEvaluator<T> | Solstice",
    "summary": "Class CoreSpecificationEvaluator<T> Namespace Solstice.Repository.Specifications Assembly Solstice.Repository.dll public class CoreSpecificationEvaluator<T> where T : class Type Parameters T Inheritance object CoreSpecificationEvaluator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreSpecificationEvaluator() protected CoreSpecificationEvaluator() Methods GetQuery(IQueryable<T>, ICoreSpecifications<T>) public static IQueryable<T> GetQuery(IQueryable<T> query, ICoreSpecifications<T> specifications) Parameters query IQueryable<T> specifications ICoreSpecifications<T> Returns IQueryable<T>"
  },
  "Repository/Solstice.Repository.Specifications.ICoreSpecifications-1.html": {
    "href": "Repository/Solstice.Repository.Specifications.ICoreSpecifications-1.html",
    "title": "Interface ICoreSpecifications<T> | Solstice",
    "summary": "Interface ICoreSpecifications<T> Namespace Solstice.Repository.Specifications Assembly Solstice.Repository.dll public interface ICoreSpecifications<T> Type Parameters T Properties ComplexIncludes Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> ComplexIncludes { get; } Property Value Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> Distincts bool Distincts { get; } Property Value bool FilterCondition Expression<Func<T, bool>> FilterCondition { get; } Property Value Expression<Func<T, bool>> GroupBys Expression<Func<T, object>> GroupBys { get; } Property Value Expression<Func<T, object>> OrderByDescendings Collection<Expression<Func<T, object>>> OrderByDescendings { get; } Property Value Collection<Expression<Func<T, object>>> OrderBys Collection<Expression<Func<T, object>>> OrderBys { get; } Property Value Collection<Expression<Func<T, object>>> SimpleIncludes Collection<Expression<Func<T, object>>> SimpleIncludes { get; } Property Value Collection<Expression<Func<T, object>>>"
  },
  "Repository/Solstice.Repository.Specifications.Specification-1.html": {
    "href": "Repository/Solstice.Repository.Specifications.Specification-1.html",
    "title": "Class Specification<T> | Solstice",
    "summary": "Class Specification<T> Namespace Solstice.Repository.Specifications Assembly Solstice.Repository.dll The coreSpecifications<T> class implements the IcoreSpecifications<T> interface for providing generic ways to define specifications for querying the database. public class Specification<T> : ICoreSpecifications<T> Type Parameters T The type of the object which specifications are applied to. Something like an EF Core model type. Inheritance object Specification<T> Implements ICoreSpecifications<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples This sample shows how to create a new instance of coreSpecifications<T>. var specs = new coreSpecifications<MyModel>(); specs.SetFilterCondition(x => x.Property > 0); specs.ApplyOrderBy(x => x.AnotherProperty); Remarks Properties and methods in this class allow for including related data, ordering, filtering, and grouping the result of queries against a DBSet of the specified type T. Note: The 'Include', 'OrderBy', 'OrderByDescending', 'FilterCondition', and 'GroupBy' are Expressions and something like LINQ queries. Constructors Specification() public Specification() Specification(Expression<Func<T, bool>>?) public Specification(Expression<Func<T, bool>>? filterCondition) Parameters filterCondition Expression<Func<T, bool>> Properties ComplexIncludes public Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> ComplexIncludes { get; } Property Value Collection<Func<IQueryable<T>, IIncludableQueryable<T, object>>> Distincts public bool Distincts { get; } Property Value bool FilterCondition public Expression<Func<T, bool>> FilterCondition { get; } Property Value Expression<Func<T, bool>> GroupBys public Expression<Func<T, object>> GroupBys { get; } Property Value Expression<Func<T, object>> OrderByDescendings public Collection<Expression<Func<T, object>>> OrderByDescendings { get; } Property Value Collection<Expression<Func<T, object>>> OrderBys public Collection<Expression<Func<T, object>>> OrderBys { get; } Property Value Collection<Expression<Func<T, object>>> SimpleIncludes public Collection<Expression<Func<T, object>>> SimpleIncludes { get; } Property Value Collection<Expression<Func<T, object>>> Methods Distinct() Permet d'ajouter un Distinct à la requête public Specification<T> Distinct() Returns Specification<T> GroupBy(Expression<Func<T, object>>) Permet d'ajouter un GroupBy à la requête public Specification<T> GroupBy(Expression<Func<T, object>> groupByExpression) Parameters groupByExpression Expression<Func<T, object>> Returns Specification<T> Include(Func<IQueryable<T>, IIncludableQueryable<T, object>>) Permet d'effectuer un .Include sur une entité public Specification<T> Include(Func<IQueryable<T>, IIncludableQueryable<T, object>> includeExpression) Parameters includeExpression Func<IQueryable<T>, IIncludableQueryable<T, object>> Returns Specification<T> Remarks Exemple: new Specification().Include(item => item.Include(item => item.User).ThenInclude(item => item.Address)) Include(Expression<Func<T, object>>) Permet d'effectuer un .Include sur une entité public Specification<T> Include(Expression<Func<T, object>> includeExpression) Parameters includeExpression Expression<Func<T, object>> Returns Specification<T> Remarks Exemple: new Specification().Include(item => item.User) OrderBy(Expression<Func<T, object>>) Permet d'ajouter un OrderBy à la requête Si on en ajoute plusieurs, ils seront exécutés dans l'ordre d'ajout (OrderBy, ThenBy, ThenBy, ...) public Specification<T> OrderBy(Expression<Func<T, object>> orderByExpression) Parameters orderByExpression Expression<Func<T, object>> Returns Specification<T> OrderByDescending(Expression<Func<T, object>>) Permet d'ajouter un OrderByDescending à la requête Si on en ajoute plusieurs, ils seront exécutés dans l'ordre d'ajout (OrderByDescending, ThenByDescending, ThenByDescending, ...) public Specification<T> OrderByDescending(Expression<Func<T, object>> orderByDescendingExpression) Parameters orderByDescendingExpression Expression<Func<T, object>> Returns Specification<T> SetFilterCondition(Expression<Func<T, bool>>) public void SetFilterCondition(Expression<Func<T, bool>> filterExpression) Parameters filterExpression Expression<Func<T, bool>>"
  },
  "Repository/Solstice.Repository.Specifications.html": {
    "href": "Repository/Solstice.Repository.Specifications.html",
    "title": "Namespace Solstice.Repository.Specifications | Solstice",
    "summary": "Namespace Solstice.Repository.Specifications Classes CoreSpecificationEvaluator<T> Specification<T> The coreSpecifications<T> class implements the IcoreSpecifications<T> interface for providing generic ways to define specifications for querying the database. Interfaces ICoreSpecifications<T>"
  },
  "Repository/Solstice.Repository.UnitOfWork-1.html": {
    "href": "Repository/Solstice.Repository.UnitOfWork-1.html",
    "title": "Class UnitOfWork<TDbContext> | Solstice",
    "summary": "Class UnitOfWork<TDbContext> Namespace Solstice.Repository Assembly Solstice.Repository.dll public sealed class UnitOfWork<TDbContext> : IUnitOfWork, IDisposable where TDbContext : DbContext Type Parameters TDbContext Inheritance object UnitOfWork<TDbContext> Implements IUnitOfWork IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWork(TDbContext, IHttpContextAccessor) public UnitOfWork(TDbContext dbContext, IHttpContextAccessor httpContext) Parameters dbContext TDbContext httpContext IHttpContextAccessor Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "Repository/Solstice.Repository.html": {
    "href": "Repository/Solstice.Repository.html",
    "title": "Namespace Solstice.Repository | Solstice",
    "summary": "Namespace Solstice.Repository Classes UnitOfWork<TDbContext> Interfaces IUnitOfWork"
  },
  "Scheduled/Solstice.Scheduled.Core.CoreBackgroundService.html": {
    "href": "Scheduled/Solstice.Scheduled.Core.CoreBackgroundService.html",
    "title": "Class CoreBackgroundService | Solstice",
    "summary": "Class CoreBackgroundService Namespace Solstice.Scheduled.Core Assembly Solstice.Scheduled.dll public abstract class CoreBackgroundService : IHostedService Inheritance object CoreBackgroundService Implements IHostedService Derived CoreQueuedBackgroundService CoreScopedProcessor<TDbContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAsync(CancellationToken) protected virtual Task ExecuteAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task ProcessAsync(CancellationToken) protected abstract Task ProcessAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task StartAsync(CancellationToken) Triggered when the application host is ready to start the service. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the start process has been aborted. Returns Task A Task that represents the asynchronous Start operation. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the shutdown process should no longer be graceful. Returns Task A Task that represents the asynchronous Stop operation."
  },
  "Scheduled/Solstice.Scheduled.Core.html": {
    "href": "Scheduled/Solstice.Scheduled.Core.html",
    "title": "Namespace Solstice.Scheduled.Core | Solstice",
    "summary": "Namespace Solstice.Scheduled.Core Classes CoreBackgroundService"
  },
  "Scheduled/Solstice.Scheduled.Injections.ScheduledInjections.html": {
    "href": "Scheduled/Solstice.Scheduled.Injections.ScheduledInjections.html",
    "title": "Class ScheduledInjections | Solstice",
    "summary": "Class ScheduledInjections Namespace Solstice.Scheduled.Injections Assembly Solstice.Scheduled.dll public static class ScheduledInjections Inheritance object ScheduledInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCronServices(IServiceCollection, params Type[]) Injector to add hosted services to the services public static void AddCronServices(this IServiceCollection services, params Type[] types) Parameters services IServiceCollection types Type[] Remarks services.AddCronServices(typeof(HostedService1), typeof(HostedService2), ...) Exceptions ArgumentException AddQueue(IServiceCollection, int) Injector to add a queue to the services public static void AddQueue(this IServiceCollection services, int capacity = 100000) Parameters services IServiceCollection capacity int Queue capacity"
  },
  "Scheduled/Solstice.Scheduled.Injections.html": {
    "href": "Scheduled/Solstice.Scheduled.Injections.html",
    "title": "Namespace Solstice.Scheduled.Injections | Solstice",
    "summary": "Namespace Solstice.Scheduled.Injections Classes ScheduledInjections"
  },
  "Scheduled/Solstice.Scheduled.Queue.CoreQueuedBackgroundService.html": {
    "href": "Scheduled/Solstice.Scheduled.Queue.CoreQueuedBackgroundService.html",
    "title": "Class CoreQueuedBackgroundService | Solstice",
    "summary": "Class CoreQueuedBackgroundService Namespace Solstice.Scheduled.Queue Assembly Solstice.Scheduled.dll public sealed class CoreQueuedBackgroundService : CoreBackgroundService, IHostedService Inheritance object CoreBackgroundService CoreQueuedBackgroundService Implements IHostedService Inherited Members CoreBackgroundService.StartAsync(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CoreQueuedBackgroundService(IBackgroundTaskQueue, ILogger<CoreQueuedBackgroundService>) public CoreQueuedBackgroundService(IBackgroundTaskQueue taskQueue, ILogger<CoreQueuedBackgroundService> logger) Parameters taskQueue IBackgroundTaskQueue logger ILogger<CoreQueuedBackgroundService> Methods ExecuteAsync(CancellationToken) protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task ProcessAsync(CancellationToken) protected override Task ProcessAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task StopAsync(CancellationToken) public Task StopAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task"
  },
  "Scheduled/Solstice.Scheduled.Queue.DefaultBackgroundTaskQueue.html": {
    "href": "Scheduled/Solstice.Scheduled.Queue.DefaultBackgroundTaskQueue.html",
    "title": "Class DefaultBackgroundTaskQueue | Solstice",
    "summary": "Class DefaultBackgroundTaskQueue Namespace Solstice.Scheduled.Queue Assembly Solstice.Scheduled.dll public sealed class DefaultBackgroundTaskQueue : IBackgroundTaskQueue Inheritance object DefaultBackgroundTaskQueue Implements IBackgroundTaskQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultBackgroundTaskQueue(int) public DefaultBackgroundTaskQueue(int capacity) Parameters capacity int Methods ClearChannel() public void ClearChannel() DequeueAsync(CancellationToken) public ValueTask<QueueItem> DequeueAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns ValueTask<QueueItem> QueueBackgroundWorkItemAsync(QueueItem) public ValueTask QueueBackgroundWorkItemAsync(QueueItem workItem) Parameters workItem QueueItem Returns ValueTask"
  },
  "Scheduled/Solstice.Scheduled.Queue.IBackgroundTaskQueue.html": {
    "href": "Scheduled/Solstice.Scheduled.Queue.IBackgroundTaskQueue.html",
    "title": "Interface IBackgroundTaskQueue | Solstice",
    "summary": "Interface IBackgroundTaskQueue Namespace Solstice.Scheduled.Queue Assembly Solstice.Scheduled.dll public interface IBackgroundTaskQueue Methods ClearChannel() void ClearChannel() DequeueAsync(CancellationToken) ValueTask<QueueItem> DequeueAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns ValueTask<QueueItem> QueueBackgroundWorkItemAsync(QueueItem) ValueTask QueueBackgroundWorkItemAsync(QueueItem workItem) Parameters workItem QueueItem Returns ValueTask"
  },
  "Scheduled/Solstice.Scheduled.Queue.QueueItem.html": {
    "href": "Scheduled/Solstice.Scheduled.Queue.QueueItem.html",
    "title": "Class QueueItem | Solstice",
    "summary": "Class QueueItem Namespace Solstice.Scheduled.Queue Assembly Solstice.Scheduled.dll public class QueueItem Inheritance object QueueItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Guid public Guid Guid { get; init; } Property Value Guid WorkItem public Func<CancellationToken, Task>? WorkItem { get; init; } Property Value Func<CancellationToken, Task>"
  },
  "Scheduled/Solstice.Scheduled.Queue.html": {
    "href": "Scheduled/Solstice.Scheduled.Queue.html",
    "title": "Namespace Solstice.Scheduled.Queue | Solstice",
    "summary": "Namespace Solstice.Scheduled.Queue Classes CoreQueuedBackgroundService DefaultBackgroundTaskQueue QueueItem Interfaces IBackgroundTaskQueue"
  },
  "Scheduled/Solstice.Scheduled.Scheduled.CoreScheduledProcessor-1.html": {
    "href": "Scheduled/Solstice.Scheduled.Scheduled.CoreScheduledProcessor-1.html",
    "title": "Class CoreScheduledProcessor<TDbContext> | Solstice",
    "summary": "Class CoreScheduledProcessor<TDbContext> Namespace Solstice.Scheduled.Scheduled Assembly Solstice.Scheduled.dll public abstract class CoreScheduledProcessor<TDbContext> : CoreScopedProcessor<TDbContext>, IHostedService where TDbContext : DbContext Type Parameters TDbContext Inheritance object CoreBackgroundService CoreScopedProcessor<TDbContext> CoreScheduledProcessor<TDbContext> Implements IHostedService Inherited Members CoreScopedProcessor<TDbContext>._serviceScopeFactory CoreScopedProcessor<TDbContext>.ProcessAsync(CancellationToken) CoreScopedProcessor<TDbContext>.ProcessInScopeAsync(TDbContext, CancellationToken) CoreBackgroundService.StartAsync(CancellationToken) CoreBackgroundService.StopAsync(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreScheduledProcessor(IServiceScopeFactory) protected CoreScheduledProcessor(IServiceScopeFactory serviceScopeFactory) Parameters serviceScopeFactory IServiceScopeFactory Properties Schedule protected abstract string Schedule { get; } Property Value string Methods ExecuteAsync(CancellationToken) protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task"
  },
  "Scheduled/Solstice.Scheduled.Scheduled.CoreScopedProcessor-1.html": {
    "href": "Scheduled/Solstice.Scheduled.Scheduled.CoreScopedProcessor-1.html",
    "title": "Class CoreScopedProcessor<TDbContext> | Solstice",
    "summary": "Class CoreScopedProcessor<TDbContext> Namespace Solstice.Scheduled.Scheduled Assembly Solstice.Scheduled.dll public abstract class CoreScopedProcessor<TDbContext> : CoreBackgroundService, IHostedService where TDbContext : DbContext Type Parameters TDbContext Inheritance object CoreBackgroundService CoreScopedProcessor<TDbContext> Implements IHostedService Derived CoreScheduledProcessor<TDbContext> Inherited Members CoreBackgroundService.StartAsync(CancellationToken) CoreBackgroundService.StopAsync(CancellationToken) CoreBackgroundService.ExecuteAsync(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreScopedProcessor(IServiceScopeFactory) protected CoreScopedProcessor(IServiceScopeFactory serviceScopeFactory) Parameters serviceScopeFactory IServiceScopeFactory Fields _serviceScopeFactory protected readonly IServiceScopeFactory _serviceScopeFactory Field Value IServiceScopeFactory Methods ProcessAsync(CancellationToken) protected override Task ProcessAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task ProcessInScopeAsync(TDbContext, CancellationToken) public abstract Task ProcessInScopeAsync(TDbContext dbContext, CancellationToken cancellationToken) Parameters dbContext TDbContext cancellationToken CancellationToken Returns Task"
  },
  "Scheduled/Solstice.Scheduled.Scheduled.html": {
    "href": "Scheduled/Solstice.Scheduled.Scheduled.html",
    "title": "Namespace Solstice.Scheduled.Scheduled | Solstice",
    "summary": "Namespace Solstice.Scheduled.Scheduled Classes CoreScheduledProcessor<TDbContext> CoreScopedProcessor<TDbContext>"
  },
  "Services/Solstice.Applications.Attributes.ServiceAttribute.html": {
    "href": "Services/Solstice.Applications.Attributes.ServiceAttribute.html",
    "title": "Class ServiceAttribute | Solstice",
    "summary": "Class ServiceAttribute Namespace Solstice.Applications.Attributes Assembly Solstice.Applications.dll The ServiceAttribute is a custom attribute used for marking classes within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from. [AttributeUsage(AttributeTargets.Class)] public sealed class ServiceAttribute : Attribute Inheritance object Attribute ServiceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Services/Solstice.Applications.Attributes.ServiceInterfaceAttribute.html": {
    "href": "Services/Solstice.Applications.Attributes.ServiceInterfaceAttribute.html",
    "title": "Class ServiceInterfaceAttribute | Solstice",
    "summary": "Class ServiceInterfaceAttribute Namespace Solstice.Applications.Attributes Assembly Solstice.Applications.dll The ServiceInterfaceAttribute is a custom attribute used for marking interface within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from. [AttributeUsage(AttributeTargets.Interface)] public sealed class ServiceInterfaceAttribute : Attribute Inheritance object Attribute ServiceInterfaceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Services/Solstice.Applications.Attributes.html": {
    "href": "Services/Solstice.Applications.Attributes.html",
    "title": "Namespace Solstice.Applications.Attributes | Solstice",
    "summary": "Namespace Solstice.Applications.Attributes Classes ServiceAttribute The ServiceAttribute is a custom attribute used for marking classes within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from. ServiceInterfaceAttribute The ServiceInterfaceAttribute is a custom attribute used for marking interface within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from."
  },
  "Services/Solstice.Applications.Core.CoreService-2.html": {
    "href": "Services/Solstice.Applications.Core.CoreService-2.html",
    "title": "Class CoreService<TRepository, T> | Solstice",
    "summary": "Class CoreService<TRepository, T> Namespace Solstice.Applications.Core Assembly Solstice.Applications.dll Abstract class 'CoreService' defines the operations for managing entities of type T in the database. public class CoreService<TRepository, T> : ICoreService<T> where TRepository : ICoreRepository<T> where T : class Type Parameters TRepository Specifies the repository type handling the operations. TRepository must be an implementation of \"ICoreRepository{T}\". T Specifies the entity type to be handled by this service. Inheritance object CoreService<TRepository, T> Implements ICoreService<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides the ability to perform CRUD operations and various queries on entities of type T. Each instance of this class will be associated with a repository which interacts with the database. Constructors CoreService(IUnitOfWork) Constructor for the Solstice service. protected CoreService(IUnitOfWork unitOfWork) Parameters unitOfWork IUnitOfWork Fields _repository protected readonly TRepository _repository Field Value TRepository Methods AddAndSaveAsync(T) public Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) public Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Method to add new entity to the repository. public Task AddAsync(T entity) Parameters entity T Entity of type T which need to be added. Returns Task Awaitable task. AddAsync<TEntity>(TEntity) public Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) public Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Method to add new range of entities to the repository. public Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> Collection of entities of type T which need to be added. Returns Task Awaitable task. AddRangeAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if there are any entities that satisfy the provided condition. public Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet, Returns Task<bool> Bool value indicating whether any entities meet the specified condition. AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) public Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction in the context of the database. public Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task representing the asynchronous operation, containing the started database transaction. CountAllAsync() Counts the total number of all entities present in the database. public Task<decimal> CountAllAsync() Returns Task<decimal> Task with the total count of entities available. CountAllAsyncBy(Expression<Func<T, bool>>) Counts the number of entities that satisfy the provided condition. public Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns Task<decimal> Task with the total count of entities that meet the specified condition. CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity FindAsync(int) public Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) public Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync(ICoreSpecifications<T>?) Gets all entities satisfying the provided specification in the database. public Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> Task representing the asynchronous operation, containing the list of entities that meet the provided specification. GetAllAsync(Expression<Func<T, bool>>) Gets all entities that satisfy the provided condition. public Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the entities that meet the specified condition. GetAllAsync(string, ICoreSpecifications<T>?) Gets all entities based on provided raw SQL query and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the list of entities that meet the provided query and specification. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets all entities based on provided raw SQL query, parameters and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. parameters ICollection<DbParameter> List of parameters to be used in query. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the list of entities that meet the provided query, parameters and specification. GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Gets all entities based on provided IQueryable query. public Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> IQueryable query to be executed. Returns Task<ICollection<TEntity>> A task representing the asynchronous operation, containing the list of entities that meet the provided query. Type Parameters TEntity GetAllQueryable() Gets an IQueryable of all entities. public IQueryable<T> GetAllQueryable() Returns IQueryable<T> IQueryable of all entities. GetAllQueryable(ICoreSpecifications<T>?) Gets entities based on provided specifications. public IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> IQueryable of entities that meet the provided specifications. GetAllQueryable(Expression<Func<T, bool>>) Gets entities by their specifications and provides a queryable list. public IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns IQueryable<T> IQueryable of entities that meet the specified condition. GetAllQueryable(string, ICoreSpecifications<T>?) Gets entities based on provided raw SQL query and specifications. public IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable representation of entities that meet the provided query and specification. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets entities based on provided raw SQL query, parameters and specifications. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. parameters ICollection<DbParameter> List of parameters to be used in the query. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable representation of entities that meet the provided query, parameters and specification. GetBy(ICoreSpecifications<T>) Get an entity by the given specifications. public Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entity. Returns Task<T> A task representing the asynchronous operation, containing an entity that meets the provided specification. GetBy(Expression<Func<T, bool>>) Get an entity by the given specifications. public Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entity to meet. Returns Task<T> A task representing the asynchronous operation, containing an entity that meets the provided condition. GetBy<TEntity>(ICoreSpecifications<TEntity>) public Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified page. public Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) public Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Gets entities based on provided page and specifications. public Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page Defines the page boundaries. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task with a collection of all entities meeting the provided page and specifications. PageAllQueryable(Page, ICoreSpecifications<T>?) Enables paging to the queryable list of represented entities based on provided page and specifications. public IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page Defines the page boundaries. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable sublist of all entities meeting the provided page and specifications. Remove(T) Deletes the entity from the database. public void Remove(T entity) Parameters entity T The entity to be removed. RemoveAndSaveAsync(T) public Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) public Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Deletes a range of entities from the database. public void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to be removed. RemoveRangeAndSaveAsync(ICollection<T>) public Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) public void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) public void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Save any changes in the context to the database. public Task SaveAsync() Returns Task Awaitable task. Update(T) Updates an entity in the database. public void Update(T entity) Parameters entity T Entity to be updated. UpdateAndSaveAsync(T) public Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) public Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Method to update a range of entities in the repository. public void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> Collection of entities which need to be updated. UpdateRangeAndSaveAsync(ICollection<T>) public Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) public void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) public void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Services/Solstice.Applications.Core.ICoreService-1.html": {
    "href": "Services/Solstice.Applications.Core.ICoreService-1.html",
    "title": "Interface ICoreService<T> | Solstice",
    "summary": "Interface ICoreService<T> Namespace Solstice.Applications.Core Assembly Solstice.Applications.dll This interface describes an abstraction for a data manipulation service on a given type of CoreModel. It includes methods for CRUD operations, queries for specific entities, counting entities, starting transactions, and more. public interface ICoreService<T> where T : class Type Parameters T The type of the class to be processed by the service. Methods AddAndSaveAsync(T) Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Add entity to repository Task AddAsync(T entity) Parameters entity T The entity object Returns Task AddAsync<TEntity>(TEntity) Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Add range of entities to repository Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities list Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if any entity in the repository matches the provided expression Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<bool> True if any entity matches the condition, False otherwise AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction asynchronously. Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result is an IDbContextTransaction object which encapsulates all information about the transaction. CountAllAsync() Counts all entities in repository Task<decimal> CountAllAsync() Returns Task<decimal> Total count of all entities CountAllAsyncBy(Expression<Func<T, bool>>) Counts the total entities that match the provided expression Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<decimal> Total matched entities count CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity FindAsync(int) Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync(ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asynchronously. Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying The core specifications or an empty collection if no matches. GetAllAsync(Expression<Func<T, bool>>) Retrieves a collection of entities from the repository that satisfy the specified condition asynchronously. Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition or an empty collection if there are no matches. GetAllAsync(string, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query and specifications. Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query and The core specifications or an empty collection if no matches. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query, parameters and specifications. Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query, parameters and The core specifications or an empty collection if no matches. GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Retrieves a collection of entities from a specified IQueryable. Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> An IQueryable that retrieves entities from the repository. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of entities that satisfy the query or an empty collection if no matches. Type Parameters TEntity GetAllQueryable() Retrieves all entities from the repository asynchronously. IQueryable<T> GetAllQueryable() Returns IQueryable<T> A queryable collection of all entities in the repository. GetAllQueryable(ICoreSpecifications<T>?) Retrieves entities that match the specified Solstice specifications from the repository asynchronously. IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities that satisfy The core specifications. GetAllQueryable(Expression<Func<T, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<T> A queryable collection of entities matching the condition. GetAllQueryable(string, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query and The core specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query, parameters and The core specifications. GetBy(ICoreSpecifications<T>) Retrieves an entity from the repository that meets the criteria specified by the given Solstice specification. Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that an entity must meet to be retrieved from the repository. Returns Task<T> A task that represents the asynchronous operation. The task result is the first entity that satisfies the specified Solstice specifications. If no entity satisfies the specifications, the task result is null. GetBy(Expression<Func<T, bool>>) Retrieves an entity that matches the specified condition from the repository. Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first matching entity or null if no entity matches the condition. GetBy<TEntity>(ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified page. Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Retrieves a collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition. or an empty collection if no matches, paged by the given information in Page object. PageAllQueryable(Page, ICoreSpecifications<T>?) Retrieves a queryable collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of all entities in the repository that fulfill the condition, paged by the given information in page object. Remove(T) Remove entity from repository void Remove(T entity) Parameters entity T The entity object RemoveAndSaveAsync(T) Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Remove range of entities from repository void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list RemoveRangeAndSaveAsync(ICollection<T>) Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Save changes in repository Task SaveAsync() Returns Task Update(T) Update entity in repository void Update(T entity) Parameters entity T The entity object UpdateAndSaveAsync(T) Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Update range of entities in repository void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list UpdateRangeAndSaveAsync(ICollection<T>) Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Services/Solstice.Applications.Core.html": {
    "href": "Services/Solstice.Applications.Core.html",
    "title": "Namespace Solstice.Applications.Core | Solstice",
    "summary": "Namespace Solstice.Applications.Core Classes CoreService<TRepository, T> Abstract class 'CoreService' defines the operations for managing entities of type T in the database. Interfaces ICoreService<T> This interface describes an abstraction for a data manipulation service on a given type of CoreModel. It includes methods for CRUD operations, queries for specific entities, counting entities, starting transactions, and more."
  },
  "Services/Solstice.Applications.Injections.ServiceInjections.html": {
    "href": "Services/Solstice.Applications.Injections.ServiceInjections.html",
    "title": "Class ServiceInjections | Solstice",
    "summary": "Class ServiceInjections Namespace Solstice.Applications.Injections Assembly Solstice.Applications.dll A static helper class for service injections. public static class ServiceInjections Inheritance object ServiceInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddServices(IServiceCollection) Extension method for the IServiceCollection interface. Adds services to the collection. public static void AddServices(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. Remarks This method scans all types in all assemblies of the current application domain. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present. AddServices(IServiceCollection, string) [Obsolete(\"AddServices with namespace is deprecated, please use AddServices or ScanServicesIn with Service Attribute instead.\")] public static void AddServices(this IServiceCollection services, string assemblyName) Parameters services IServiceCollection assemblyName string ScanServicesIn(IServiceCollection, Assembly) Extension method for the IServiceCollection interface. Adds services to the collection. public static void ScanServicesIn(this IServiceCollection services, Assembly assembly) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. assembly Assembly The assembly to load Remarks This method scans all types in the specified assembly. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present. ScanServicesIn(IServiceCollection, string) Extension method for the IServiceCollection interface. Adds services to the collection. public static void ScanServicesIn(this IServiceCollection services, string assemblyName) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. assemblyName string The name of the assembly to load Remarks This method scans all types in the specified assembly. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present."
  },
  "Services/Solstice.Applications.Injections.html": {
    "href": "Services/Solstice.Applications.Injections.html",
    "title": "Namespace Solstice.Applications.Injections | Solstice",
    "summary": "Namespace Solstice.Applications.Injections Classes ServiceInjections A static helper class for service injections."
  },
  "Services/Solstice.Service.Attributes.ServiceAttribute.html": {
    "href": "Services/Solstice.Service.Attributes.ServiceAttribute.html",
    "title": "Class ServiceAttribute | Solstice",
    "summary": "Class ServiceAttribute Namespace Solstice.Service.Attributes Assembly Solstice.Applications.dll The ServiceAttribute is a custom attribute used for marking classes within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from. [AttributeUsage(AttributeTargets.Class)] public sealed class ServiceAttribute : Attribute Inheritance object Attribute ServiceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "Services/Solstice.Service.Attributes.html": {
    "href": "Services/Solstice.Service.Attributes.html",
    "title": "Namespace Solstice.Service.Attributes | Solstice",
    "summary": "Namespace Solstice.Service.Attributes Classes ServiceAttribute The ServiceAttribute is a custom attribute used for marking classes within the Solstice.Service namespace. This attribute is sealed, implying that it cannot be inherited from."
  },
  "Services/Solstice.Service.Base.CoreService-2.html": {
    "href": "Services/Solstice.Service.Base.CoreService-2.html",
    "title": "Class CoreService<TRepository, T> | Solstice",
    "summary": "Class CoreService<TRepository, T> Namespace Solstice.Service.Base Assembly Solstice.Applications.dll Abstract class 'CoreService' defines the operations for managing entities of type T in the database. public class CoreService<TRepository, T> : ICoreService<T> where TRepository : ICoreRepository<T> where T : class Type Parameters TRepository Specifies the repository type handling the operations. TRepository must be an implementation of \"ICoreRepository{T}\". T Specifies the entity type to be handled by this service. Inheritance object CoreService<TRepository, T> Implements ICoreService<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides the ability to perform CRUD operations and various queries on entities of type T. Each instance of this class will be associated with a repository which interacts with the database. Constructors CoreService(IUnitOfWork) Constructor for the Radiant service. protected CoreService(IUnitOfWork unitOfWork) Parameters unitOfWork IUnitOfWork Fields _repository protected readonly TRepository _repository Field Value TRepository Methods AddAndSaveAsync(T) public Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) public Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Method to add new entity to the repository. public Task AddAsync(T entity) Parameters entity T Entity of type T which need to be added. Returns Task Awaitable task. AddAsync<TEntity>(TEntity) public Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) public Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Method to add new range of entities to the repository. public Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> Collection of entities of type T which need to be added. Returns Task Awaitable task. AddRangeAsync<TEntity>(ICollection<TEntity>) public Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if there are any entities that satisfy the provided condition. public Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet, Returns Task<bool> Bool value indicating whether any entities meet the specified condition. AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) public Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction in the context of the database. public Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task representing the asynchronous operation, containing the started database transaction. CountAllAsync() Counts the total number of all entities present in the database. public Task<decimal> CountAllAsync() Returns Task<decimal> Task with the total count of entities available. CountAllAsyncBy(Expression<Func<T, bool>>) Counts the number of entities that satisfy the provided condition. public Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns Task<decimal> Task with the total count of entities that meet the specified condition. CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity FindAsync(int) public Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) public Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync(ICoreSpecifications<T>?) Gets all entities satisfying the provided specification in the database. public Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> Task representing the asynchronous operation, containing the list of entities that meet the provided specification. GetAllAsync(Expression<Func<T, bool>>) Gets all entities that satisfy the provided condition. public Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the entities that meet the specified condition. GetAllAsync(string, ICoreSpecifications<T>?) Gets all entities based on provided raw SQL query and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the list of entities that meet the provided query and specification. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets all entities based on provided raw SQL query, parameters and specifications. public Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. parameters ICollection<DbParameter> List of parameters to be used in query. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task representing the asynchronous operation, containing the list of entities that meet the provided query, parameters and specification. GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Gets all entities based on provided IQueryable query. public Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> IQueryable query to be executed. Returns Task<ICollection<TEntity>> A task representing the asynchronous operation, containing the list of entities that meet the provided query. Type Parameters TEntity GetAllQueryable() Gets an IQueryable of all entities. public IQueryable<T> GetAllQueryable() Returns IQueryable<T> IQueryable of all entities. GetAllQueryable(ICoreSpecifications<T>?) Gets entities based on provided specifications. public IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> IQueryable of entities that meet the provided specifications. GetAllQueryable(Expression<Func<T, bool>>) Gets entities by their specifications and provides a queryable list. public IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entities to meet. Returns IQueryable<T> IQueryable of entities that meet the specified condition. GetAllQueryable(string, ICoreSpecifications<T>?) Gets entities based on provided raw SQL query and specifications. public IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable representation of entities that meet the provided query and specification. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Gets entities based on provided raw SQL query, parameters and specifications. public IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string Raw SQL query to be executed. parameters ICollection<DbParameter> List of parameters to be used in the query. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable representation of entities that meet the provided query, parameters and specification. GetBy(ICoreSpecifications<T>) Get an entity by the given specifications. public Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> Specifications to be met by the entity. Returns Task<T> A task representing the asynchronous operation, containing an entity that meets the provided specification. GetBy(Expression<Func<T, bool>>) Get an entity by the given specifications. public Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> A delegate defining the condition for the entity to meet. Returns Task<T> A task representing the asynchronous operation, containing an entity that meets the provided condition. GetBy<TEntity>(ICoreSpecifications<TEntity>) public Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) public Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified Radiant page. public Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given Radiant page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) public Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) public Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) public Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Gets entities based on provided page and specifications. public Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page Defines the page boundaries. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns Task<ICollection<T>> A task with a collection of all entities meeting the provided page and specifications. PageAllQueryable(Page, ICoreSpecifications<T>?) Enables paging to the queryable list of represented entities based on provided page and specifications. public IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page Defines the page boundaries. coreSpecifications ICoreSpecifications<T> Specifications to be met by the entities. Returns IQueryable<T> A IQueryable sublist of all entities meeting the provided page and specifications. Remove(T) Deletes the entity from the database. public void Remove(T entity) Parameters entity T The entity to be removed. RemoveAndSaveAsync(T) public Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) public Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Deletes a range of entities from the database. public void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities to be removed. RemoveRangeAndSaveAsync(ICollection<T>) public Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) public void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) public void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Save any changes in the context to the database. public Task SaveAsync() Returns Task Awaitable task. Update(T) Updates an entity in the database. public void Update(T entity) Parameters entity T Entity to be updated. UpdateAndSaveAsync(T) public Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) public Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Method to update a range of entities in the repository. public void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> Collection of entities which need to be updated. UpdateRangeAndSaveAsync(ICollection<T>) public Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) public Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) public void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) public void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Services/Solstice.Service.Base.ICoreService-1.html": {
    "href": "Services/Solstice.Service.Base.ICoreService-1.html",
    "title": "Interface ICoreService<T> | Solstice",
    "summary": "Interface ICoreService<T> Namespace Solstice.Service.Base Assembly Solstice.Applications.dll This interface describes an abstraction for a data manipulation service on a given type of RadiantModel. It includes methods for CRUD operations, queries for specific entities, counting entities, starting transactions, and more. public interface ICoreService<T> where T : class Type Parameters T The type of the class to be processed by the service. Methods AddAndSaveAsync(T) Task AddAndSaveAsync(T entity) Parameters entity T Returns Task AddAndSaveAsync<TEntity>(TEntity) Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddAsync(T) Add entity to repository Task AddAsync(T entity) Parameters entity T The entity object Returns Task AddAsync<TEntity>(TEntity) Task AddAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity AddRangeAndSaveAsync(ICollection<T>) Task AddRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AddRangeAsync(ICollection<T>) Add range of entities to repository Task AddRangeAsync(ICollection<T> entities) Parameters entities ICollection<T> The entities list Returns Task AddRangeAsync<TEntity>(ICollection<TEntity>) Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity AnyAsyncBy(Expression<Func<T, bool>>) Checks if any entity in the repository matches the provided expression Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<bool> True if any entity matches the condition, False otherwise AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<bool> Type Parameters TEntity AnyAsyncBy<TEntity>(IQueryable<TEntity>) Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class Parameters queryable IQueryable<TEntity> Returns Task<bool> Type Parameters TEntity BeginTransactionAsync() Begins a new transaction asynchronously. Task<IDbContextTransaction> BeginTransactionAsync() Returns Task<IDbContextTransaction> A task that represents the asynchronous operation. The task result is an IDbContextTransaction object which encapsulates all information about the transaction. CountAllAsync() Counts all entities in repository Task<decimal> CountAllAsync() Returns Task<decimal> Total count of all entities CountAllAsyncBy(Expression<Func<T, bool>>) Counts the total entities that match the provided expression Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> The expression that describes the condition to match Returns Task<decimal> Total matched entities count CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>) Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<decimal> Type Parameters TEntity FindAsync(int) Task<T> FindAsync(int id) Parameters id int Returns Task<T> FindAsync<TEntity>(int) Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class Parameters id int Returns Task<TEntity> Type Parameters TEntity GetAllAsync(ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asynchronously. Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying The core specifications or an empty collection if no matches. GetAllAsync(Expression<Func<T, bool>>) Retrieves a collection of entities from the repository that satisfy the specified condition asynchronously. Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition or an empty collection if there are no matches. GetAllAsync(string, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query and specifications. Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query and The core specifications or an empty collection if no matches. GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query, parameters and specifications. Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query, parameters and The core specifications or an empty collection if no matches. GetAllAsync<TEntity>(ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class Parameters query string Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class Parameters query string parameters ICollection<DbParameter> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<ICollection<TEntity>> Type Parameters TEntity GetAllByQueryable<TEntity>(IQueryable<TEntity>) Retrieves a collection of entities from a specified IQueryable. Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query) Parameters query IQueryable<TEntity> An IQueryable that retrieves entities from the repository. Returns Task<ICollection<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of entities that satisfy the query or an empty collection if no matches. Type Parameters TEntity GetAllQueryable() Retrieves all entities from the repository asynchronously. IQueryable<T> GetAllQueryable() Returns IQueryable<T> A queryable collection of all entities in the repository. GetAllQueryable(ICoreSpecifications<T>?) Retrieves entities that match the specified Radiant specifications from the repository asynchronously. IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities that satisfy The core specifications. GetAllQueryable(Expression<Func<T, bool>>) Retrieves entities that match the specified condition from the repository asynchronously. IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns IQueryable<T> A queryable collection of entities matching the condition. GetAllQueryable(string, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query and The core specifications. GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?) Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously. IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications) Parameters query string A SQL-like query that retrieves entities from the repository. parameters ICollection<DbParameter> A collection of database parameters used in the query coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of entities satisfying the query, parameters and The core specifications. GetBy(ICoreSpecifications<T>) Retrieves an entity from the repository that meets the criteria specified by the given Radiant specification. Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications) Parameters coreSpecifications ICoreSpecifications<T> The specifications that an entity must meet to be retrieved from the repository. Returns Task<T> A task that represents the asynchronous operation. The task result is the first entity that satisfies the specified Radiant specifications. If no entity satisfies the specifications, the task result is null. GetBy(Expression<Func<T, bool>>) Retrieves an entity that matches the specified condition from the repository. Task<T?> GetBy(Expression<Func<T, bool>> where) Parameters where Expression<Func<T, bool>> An expression representing a condition to be matched by entities in the repository. Returns Task<T> A task that represents the asynchronous operation. The task result contains the first matching entity or null if no entity matches the condition. GetBy<TEntity>(ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(Expression<Func<TEntity, bool>>) Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class Parameters where Expression<Func<TEntity, bool>> Returns Task<TEntity> Type Parameters TEntity GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<TEntity> Type Parameters TEntity GetPagedResult(Page) Retrieves a paginated list of entities from the repository that conforms to the specified Radiant page. Task<Paged<T>> GetPagedResult(Page page) Parameters page Page The page number and size of the entities to be retrieved from the repository. Returns Task<Paged<T>> A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications, paginated based on the given Radiant page object. If no entities meet the specifications, the task result is an empty collection. GetPagedResult(Page, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications) Parameters page Page coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters) Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<T>> GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>) Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications) Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<T> Returns Task<Paged<T>> GetPagedResult<TEntity>(Page) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class Parameters page Page Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> Returns Task<Paged<TEntity>> Type Parameters TEntity GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>) Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class Parameters page Page query string parameters ICollection<DbParameter> coreSpecifications ICoreSpecifications<TEntity> Returns Task<Paged<TEntity>> Type Parameters TEntity PageAllAsync(Page, ICoreSpecifications<T>?) Retrieves a collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns Task<ICollection<T>> A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition. or an empty collection if no matches, paged by the given information in RadiantPage object. PageAllQueryable(Page, ICoreSpecifications<T>?) Retrieves a queryable collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them. IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications) Parameters page Page The page number and size of the entities to be retrieved from the repository. coreSpecifications ICoreSpecifications<T> The specifications that entities must meet to be retrieved from the repository. Returns IQueryable<T> A queryable collection of all entities in the repository that fulfill the condition, paged by the given information in RadiantPage object. Remove(T) Remove entity from repository void Remove(T entity) Parameters entity T The entity object RemoveAndSaveAsync(T) Task RemoveAndSaveAsync(T entity) Parameters entity T Returns Task RemoveAndSaveAsync<TEntity>(TEntity) Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity RemoveRange(ICollection<T>) Remove range of entities from repository void RemoveRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list RemoveRangeAndSaveAsync(ICollection<T>) Task RemoveRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity RemoveRange<TEntity>(ICollection<TEntity>) void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Remove<TEntity>(TEntity) void Remove<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity SaveAsync() Save changes in repository Task SaveAsync() Returns Task Update(T) Update entity in repository void Update(T entity) Parameters entity T The entity object UpdateAndSaveAsync(T) Task UpdateAndSaveAsync(T entity) Parameters entity T Returns Task UpdateAndSaveAsync<TEntity>(TEntity) Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Returns Task Type Parameters TEntity UpdateRange(ICollection<T>) Update range of entities in repository void UpdateRange(ICollection<T> entities) Parameters entities ICollection<T> The entities list UpdateRangeAndSaveAsync(ICollection<T>) Task UpdateRangeAndSaveAsync(ICollection<T> entities) Parameters entities ICollection<T> Returns Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>) Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Returns Task Type Parameters TEntity UpdateRange<TEntity>(ICollection<TEntity>) void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class Parameters entities ICollection<TEntity> Type Parameters TEntity Update<TEntity>(TEntity) void Update<TEntity>(TEntity entity) where TEntity : class Parameters entity TEntity Type Parameters TEntity"
  },
  "Services/Solstice.Service.Base.html": {
    "href": "Services/Solstice.Service.Base.html",
    "title": "Namespace Solstice.Service.Base | Solstice",
    "summary": "Namespace Solstice.Service.Base Classes CoreService<TRepository, T> Abstract class 'CoreService' defines the operations for managing entities of type T in the database. Interfaces ICoreService<T> This interface describes an abstraction for a data manipulation service on a given type of RadiantModel. It includes methods for CRUD operations, queries for specific entities, counting entities, starting transactions, and more."
  },
  "Services/Solstice.Service.Injections.ServiceInjections.html": {
    "href": "Services/Solstice.Service.Injections.ServiceInjections.html",
    "title": "Class ServiceInjections | Solstice",
    "summary": "Class ServiceInjections Namespace Solstice.Service.Injections Assembly Solstice.Applications.dll A static helper class for service injections. public static class ServiceInjections Inheritance object ServiceInjections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddServices(IServiceCollection) Extension method for the IServiceCollection interface. Adds services to the collection. public static void AddServices(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. Remarks This method scans all types in all assemblies of the current application domain. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present. AddServices(IServiceCollection, string) [Obsolete(\"AddServices with namespace is deprecated, please use AddServices or ScanServicesIn with Service Attribute instead.\")] public static void AddServices(this IServiceCollection services, string assemblyName) Parameters services IServiceCollection assemblyName string ScanServicesIn(IServiceCollection, Assembly) Extension method for the IServiceCollection interface. Adds services to the collection. public static void ScanServicesIn(this IServiceCollection services, Assembly assembly) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. assembly Assembly The assembly to load Remarks This method scans all types in the specified assembly. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present. ScanServicesIn(IServiceCollection, string) Extension method for the IServiceCollection interface. Adds services to the collection. public static void ScanServicesIn(this IServiceCollection services, string assemblyName) Parameters services IServiceCollection The IServiceCollection to which the services need to be added. assemblyName string The name of the assembly to load Remarks This method scans all types in the specified assembly. It looks for types that have the ServiceAttribute. If no such types are found, an exception about no services is thrown. If there are such types, they are all added as services with scope lifetime into the passed IServiceCollection. Exceptions CoreException Throws if there are no services with the ServiceAttribute present."
  },
  "Services/Solstice.Service.Injections.html": {
    "href": "Services/Solstice.Service.Injections.html",
    "title": "Namespace Solstice.Service.Injections | Solstice",
    "summary": "Namespace Solstice.Service.Injections Classes ServiceInjections A static helper class for service injections."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Solstice",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}